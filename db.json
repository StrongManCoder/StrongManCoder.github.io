{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/author.jpg","path":"images/author.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"aec368cdc265c6743d0b1db620b9e698dc96436d","modified":1502874058000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1545897950754},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1545897950754},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1545897950756},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1545897950756},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1545897950756},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1545897950757},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1545897950757},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1545897950757},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1545897950757},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1545897950758},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1545897950758},{"_id":"themes/next/_config.yml","hash":"8949ebd620195cfdcb142312ddc1fbd3cc8b758d","modified":1545897950759},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1545897950759},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1545897950759},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1545897950754},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1545897950794},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1466579101000},{"_id":"source/_posts/BAT面试指南试答百度二面.md","hash":"200178b4086ccb65c72d765639514f73a33235da","modified":1545897950668},{"_id":"source/_posts/KVO小记.md","hash":"7f076dbceb4cfbe932826e3aac5e4ab0c4f89a85","modified":1545897950668},{"_id":"source/_posts/Mac-下修改文件夹权限.md","hash":"ecfae71fbd6d99439d4b82b3c7573fb47d118bee","modified":1545897950668},{"_id":"source/_posts/iOS测试包自动分发，一键安装，效率提高百分百.md","hash":"64543f312a8d4584e7f39b870af27dbd08efb76a","modified":1545897950669},{"_id":"source/_posts/在Mac下通过HEXO在Github上搭建博客.md","hash":"3fa8df80bb2d3bf92d5da2c42f224695b69f07ff","modified":1545897950669},{"_id":"source/_posts/招聘一个靠谱的-iOS.md","hash":"867617f8150b2006ad62dd8776757af4214d7cc7","modified":1545897950670},{"_id":"source/_posts/面试题集锦.md","hash":"e41bde0c06c3a642a28aa937abf35794226e61ce","modified":1545897950670},{"_id":"source/about/index.md","hash":"1c6e669cc178aff2f59f9a68cf34d6fa69bc2571","modified":1545897950671},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1545897950755},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1545897950755},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1545897950755},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1545897950755},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1545897950760},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1545897950760},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1545897950761},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1545897950761},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1545897950761},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1545897950762},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1545897950762},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1545897950763},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1545897950763},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1545897950763},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1545897950764},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1545897950764},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1545897950764},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1545897950765},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1545897950765},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1545897950765},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1545897950767},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1545897950792},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1545897950792},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1545897950792},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1545897950793},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1545897950793},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1545897950794},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1545897950794},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1545897950795},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1545897950795},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1545897950900},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1545897950900},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1545897950901},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897950841},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1545897950766},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1545897950766},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1545897950767},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1545897950767},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1545897950768},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1545897950768},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1545897950769},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1545897950769},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1545897950769},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1545897950770},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1545897950770},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1545897950771},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1545897950772},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1545897950772},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1545897950772},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1545897950776},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1545897950776},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1545897950778},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1545897950787},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1545897950787},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1545897950787},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1545897950788},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1545897950788},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1545897950788},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1545897950789},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1545897950796},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1545897950796},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1545897950797},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1545897950797},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1545897950797},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1545897950798},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1545897950798},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1545897950799},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1545897950799},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1545897950841},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1545897950841},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1545897950841},{"_id":"themes/next/source/images/author.jpg","hash":"5d354ef61fdf666e9af447ecd18155828a99bf4a","modified":1545897950842},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1545897950842},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1545897950842},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1545897950843},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1545897950843},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1545897950843},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1545897950844},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1545897950844},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1545897950845},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1545897950844},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1545897950845},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545897950845},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1545897950845},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545897950846},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1545897950846},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1545897950846},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1545897950846},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897950777},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897950777},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897950829},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897950829},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897950830},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897950839},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897950840},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1545897950771},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1545897950771},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1545897950773},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1545897950773},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1545897950774},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1545897950774},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1545897950774},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1545897950775},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1545897950775},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1545897950777},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1545897950777},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1545897950778},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1545897950778},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1545897950779},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1545897950779},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1545897950779},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1545897950779},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1545897950780},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1545897950780},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1545897950780},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1545897950781},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1545897950781},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1545897950782},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1545897950782},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1545897950783},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1545897950783},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1545897950784},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1545897950784},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1545897950784},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1545897950785},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1545897950785},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1545897950785},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1545897950786},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1545897950786},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1545897950790},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1545897950790},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1545897950791},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1545897950791},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"4331b53e26894a826d6d709d33e45380620269f3","modified":1545897950828},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1545897950828},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1545897950829},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1545897950829},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1545897950839},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1545897950839},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1545897950840},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1545897950840},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1545897950847},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1545897950847},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1545897950848},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1545897950848},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1545897950848},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1545897950849},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1545897950850},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1545897950850},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1545897950850},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1545897950847},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1545897950849},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1545897950859},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1545897950860},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1545897950856},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1545897950865},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1545897950866},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1545897950866},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1545897950868},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1545897950866},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1545897950868},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1545897950868},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1545897950869},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1545897950869},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1545897950882},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1545897950884},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1545897950884},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1545897950885},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1545897950885},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1545897950885},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1545897950886},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1545897950884},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1545897950886},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1545897950887},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1545897950887},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1545897950888},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1545897950888},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1545897950887},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1545897950888},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1545897950888},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1545897950889},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1545897950889},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1545897950889},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1545897950889},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1545897950890},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1545897950890},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1545897950890},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1545897950890},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1545897950891},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1545897950891},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1545897950892},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1545897950897},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1545897950897},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1545897950899},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1545897950899},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1545897950900},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1545897950883},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1545897950789},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1545897950790},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1545897950800},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1545897950800},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1545897950801},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1545897950801},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1545897950801},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1545897950808},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1545897950818},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1545897950825},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1545897950826},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1545897950826},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1545897950826},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1545897950827},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1545897950827},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1545897950827},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1545897950830},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1545897950831},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1545897950831},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1545897950831},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1545897950832},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1545897950832},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1545897950832},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1545897950833},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1545897950834},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1545897950834},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1545897950835},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1545897950835},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1545897950836},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1545897950836},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1545897950837},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1545897950837},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1545897950838},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1545897950838},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1545897950838},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1545897950849},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1545897950853},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1545897950855},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1545897950855},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545897950860},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545897950860},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545897950861},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545897950861},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545897950861},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545897950862},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1545897950864},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1545897950864},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1545897950865},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1545897950867},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1545897950867},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1545897950869},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1545897950870},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1545897950870},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1545897950896},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1545897950896},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1545897950854},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545897950881},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545897950882},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1545897950802},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1545897950802},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1545897950803},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1545897950803},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1545897950804},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1545897950804},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1545897950804},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1545897950805},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1545897950805},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1545897950806},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1545897950806},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1545897950807},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1545897950807},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1545897950807},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1545897950808},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1545897950808},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1545897950809},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1545897950810},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1545897950809},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1545897950810},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1545897950810},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1545897950811},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1545897950811},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1545897950811},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1545897950812},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1545897950812},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1545897950812},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1545897950813},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1545897950813},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1545897950814},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2ee5e424e443cfedb6668b5a663ef9c21beb1f7f","modified":1545897950814},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1545897950814},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1545897950815},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1545897950815},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1545897950816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1545897950816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1545897950816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1545897950817},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1545897950817},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1545897950818},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1545897950818},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1545897950819},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1545897950819},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1545897950820},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1545897950820},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1545897950820},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1545897950821},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1545897950821},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1545897950822},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1545897950822},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1545897950822},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1545897950823},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1545897950823},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1545897950823},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1545897950824},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1545897950824},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1545897950824},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1545897950825},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1545897950833},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1545897950834},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1545897950836},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1545897950851},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1545897950851},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1545897950852},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1545897950852},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1545897950852},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545897950862},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545897950862},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1545897950863},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1545897950863},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545897950863},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1545897950864},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545897950872},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545897950880},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1545897950898},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545897950874},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1545897950859},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1545897950895},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545897950878},{"_id":"public/baidusitemap.xml","hash":"6eea324d00a17937766afe08814f845df79061c7","modified":1545899033143},{"_id":"public/atom.xml","hash":"9268a753d2787d10aa2cba2265590a42aa70741d","modified":1545899033143},{"_id":"public/about/index.html","hash":"d8d6a6f0684f9fa3ed78ed67036df84a3aafd0eb","modified":1545899033153},{"_id":"public/2016/06/22/Mac-下修改文件夹权限/index.html","hash":"9ee974a34bfe9c1feeace3844328780f78e00db6","modified":1545899033153},{"_id":"public/archives/index.html","hash":"c32fcbec146b33320afedd1f3853632f804edee2","modified":1545899033153},{"_id":"public/archives/2016/index.html","hash":"4e187ecef0ab0560e9bc2beb9fa450809906b2bf","modified":1545899033153},{"_id":"public/archives/2016/03/index.html","hash":"8384becff4a68b213ce732d1803531bb29f6e794","modified":1545899033153},{"_id":"public/archives/2016/06/index.html","hash":"5a18d2d2adde5dfa3a0fc7bc94e7da054911e7b2","modified":1545899033154},{"_id":"public/archives/2016/09/index.html","hash":"c5c3ad82c181acf057191a9fd30c1ec10aecdd0d","modified":1545899033154},{"_id":"public/tags/KVO/index.html","hash":"a23c2808674716b65910214fa555a5a752233851","modified":1545899033154},{"_id":"public/tags/KVC/index.html","hash":"359f5871954850f5bc671fc1a3806aa79963d1d4","modified":1545899033154},{"_id":"public/tags/监听/index.html","hash":"c788b1324a7fe95da2415319fa765b8137db72a4","modified":1545899033154},{"_id":"public/tags/文件夹权限/index.html","hash":"bf8ac79c995988113bd12bb52ae2bf3101ce7047","modified":1545899033154},{"_id":"public/tags/iOS测试包/index.html","hash":"7f14f3923d522bf82e639f6b404b9093f19302a5","modified":1545899033154},{"_id":"public/tags/hexo/index.html","hash":"aa4615aa8ad05bf82ab25413ef87600659f7ba18","modified":1545899033154},{"_id":"public/tags/Mac/index.html","hash":"6563e4843791baa715a3e74afb4c5aa930487c8b","modified":1545899033154},{"_id":"public/tags/GitHub/index.html","hash":"12bc3514029a5a2e52e13d3f10174cdfda85c1c2","modified":1545899033154},{"_id":"public/tags/BAT/index.html","hash":"8560dbdb587c0cec54aaefeed905f51546ebb44a","modified":1545899033154},{"_id":"public/tags/面试/index.html","hash":"424c840bda97620e66f4e57418f2a77986468ac0","modified":1545899033154},{"_id":"public/tags/iOS/index.html","hash":"c20aae514733a9838bf85c6a4b9114152a7adc14","modified":1545899033154},{"_id":"public/tags/面试题/index.html","hash":"b039d22d7f1309dd8685d60fe0e1406be88ead06","modified":1545899033154},{"_id":"public/tags/集锦/index.html","hash":"37c611e1d4c698159dbf329458e4c82ec01035c9","modified":1545899033154},{"_id":"public/tags/OC/index.html","hash":"ab24baac4632aa296177bb1878c6c788238d7bfc","modified":1545899033154},{"_id":"public/2016/09/13/KVO小记/index.html","hash":"57ba09954c7c56b7d28f5935e673f374fa9b636a","modified":1545899033154},{"_id":"public/2016/06/23/BAT面试指南试答百度二面/index.html","hash":"5ab3f59b02b91366d17efa712a686dee2c78650b","modified":1545899033155},{"_id":"public/2016/06/22/招聘一个靠谱的-iOS/index.html","hash":"fbe1d79acf5833f5a627069e4d415fcfca237dce","modified":1545899033155},{"_id":"public/2016/06/22/iOS测试包自动分发，一键安装，效率提高百分百/index.html","hash":"1e334f2cad112eb23f8db527b3a8e349e8d020b1","modified":1545899033155},{"_id":"public/2016/03/24/面试题集锦/index.html","hash":"529fe6abf97ef91889a99c2a690ad673124ec3a0","modified":1545899033155},{"_id":"public/2016/03/18/在Mac下通过HEXO在Github上搭建博客/index.html","hash":"1c6bf1c448d32c4deb2639dfb74dab980efd7e8e","modified":1545899033155},{"_id":"public/index.html","hash":"6421fde7f9e7181de513f40b1baed20a1f3665ff","modified":1545899033155},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1545899033163},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1545899033163},{"_id":"public/images/author.jpg","hash":"5d354ef61fdf666e9af447ecd18155828a99bf4a","modified":1545899033163},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1545899033164},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1545899033164},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1545899033164},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1545899033164},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1545899033164},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1545899033164},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1545899033164},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1545899033164},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1545899033164},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1545899033164},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545899033164},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1545899033164},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545899033164},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1545899033164},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1545899033164},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1545899033164},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1545899033164},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1545899033165},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545899033165},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545899033165},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545899033165},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545899033165},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545899033165},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545899033165},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1545899033165},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1545899033165},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1545899033165},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1545899033165},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1545899033165},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545899033165},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545899033611},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545899033615},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1545899033616},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1545899033621},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1545899033621},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1545899033621},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1545899033621},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1545899033621},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1545899033622},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1545899033622},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1545899033622},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1545899033622},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1545899033622},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1545899033622},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1545899033622},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1545899033622},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1545899033622},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1545899033622},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1545899033622},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1545899033622},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1545899033622},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1545899033622},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1545899033623},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1545899033623},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1545899033623},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1545899033623},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1545899033623},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1545899033623},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1545899033623},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1545899033623},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1545899033623},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1545899033623},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1545899033623},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1545899033624},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1545899033624},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1545899033624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545899033624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1545899033624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1545899033624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545899033624},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1545899033624},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1545899033624},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1545899033624},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1545899033624},{"_id":"public/css/main.css","hash":"d48476e37cbbe4f8e58f350cbf7ddd49a3a7cbf8","modified":1545899033624},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545899033625},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1545899033630},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1545899033630},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1545899033630},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1545899033630},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1545899033631},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1545899033631},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1545899033631},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1545899033631},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545899033631},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1545899033634},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1545899033635},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1545899033637},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1545899033637},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545899033639},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1545899033642},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1545899033642},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1545899033644},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1545899033644},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1545899033644},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1545899033644},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1545899033644},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1545899033650},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1545899033650},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1545899033651},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1545899033653},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545899033653},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1545899033657},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1545899033658},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1545899033661},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1545899033673},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1545899033676}],"Category":[],"Data":[],"Page":[{"title":"关于我","date":"2016-03-24T05:21:10.000Z","_content":"\n一个低调的ios开发\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-03-24 13:21:10\n---\n\n一个低调的ios开发\n\n","updated":"2018-12-27T08:05:50.671Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjq6cdal60001c2fyb42vi3vv","content":"<p>一个低调的ios开发</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个低调的ios开发</p>\n"}],"Post":[{"title":"KVO小记","date":"2016-09-13T03:46:21.000Z","_content":"\n# KVO浅析\n### KVO Key-Value Observing 键值监听\nKVO是一个观察者模式。观察一个对象的属性，注册一个指定的路径，若这个对象的的属性修改，则KVO会自动通知观察者。\n\n## 使用步骤\n### 1.注册监听\n\n\n```/**\n     *  注册一个监听\n     *\n     *  @param observer 观察者\n     *  @param keyPath  属性名字\n     *  @param options  属性的变化\n     *  @param context  void类型\n     */\n- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void *)context;\n```\n### 2.回调函数\n\n\n```/**\n *  当监控的某个属性的值改变了就会调用\n *\n *  @param keyPath 属性名（哪个属性改了？）\n *  @param object  哪个对象的属性被改了？\n *  @param change  属性的修改情况（属性原来的值、属性最新的值）\n *  @param context void类型\n */\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context\n{\n    NSLog(@\"%@对象的%@属性改变了：%@\", object, keyPath, change);\n}\n```\n\n### 3.移除观察,释放内存，在dealloc函数释放\n\n\n\n```/**\n *  移除观察者\n *\n *  @param observer 观察者\n *  @param keyPath  观察的属性\n */\n- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;\n- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(nullable void *)context NS_AVAILABLE(10_7, 5_0);\n```\n\n\nKVO的观察者是由两种模式的。一种是自动通知，一种是手动通知。\n**自动通知**自动监听对象的属性，不管这个属性的前后属性变化的值是否一样，都会通知观察者。\n手动通知重写willChangeValueForKey:和didChangeValueForKey: 方法通知观察者。\n一般都是用自动通知，方便快捷。\n下面两种写法，都会举例说明。\n\n### 自动通知,主要看监听回调的分析\n场景：模拟人年龄的变化，看接受通知的次数\n\n```- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.person = [[Person alloc]init];\n    self.person.age = 15;\n\n    /**\n     *  注册监听\n     */\n    [self.person addObserver:self forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];\n    /**\n     *  第二次赋值 20\n     */\n    self.person.age = 20;\n    /**\n     *  再次赋值 20\n     */\n    self.person.age = 20;\n    /**\n     *  详细见控制台输出,只比较新旧值\n     */    \n}\n\n/**\n *  监听回调\n */\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSString *,id> *)change context:(void *)context{\n\n    NSLog(@\"\\n change = %@ \\n keyPath =%@ object =%@ context=%@\",change ,keyPath,object,context);\n\n\n\n    /** ============================ 控制台输出 ===================================\n     * \n\n\n     change = {\n     kind = 1;\n     new = 20;        --------->新的值是 20 注册监听后，observeValueForKeyPath会回调输出\n     old = 15;        --------->旧的值是 15 注册监听前，这个属性初始化时候就是15。\n     }\n     keyPath =age object =<Person: 0x7feec962a9d0> context=(null)\n\n\n     change = {\n     kind = 1;\n     new = 20;        --------->新的值是 20 再次传入20，observeValueForKeyPath这个还是会回调输出\n     old = 20;        --------->旧的值是 20\n     }\n     keyPath =age object =<Person: 0x7feec962a9d0> context=(null)\n\n     */\n\n\n    /**\n     *  由控制台输出结果得出结论，只要是对属性进行改变，不管属性的值是否变化，不区分新旧值的变化，observeValueForKeyPath都是回调，通知观察者的。\n     */\n\n}\n\n\n-(void)dealloc{\n\n    /**\n     *  移除观察\n     */\n    [self.person removeObserver:self forKeyPath:@\"age\"];\n}\n```\n\n### 手动通知\n场景：模拟人年龄的变化，看接受通知的次数\n需要在Person类里面重写方法，具体看实现代码\n\n```- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.person = [[Person alloc]init];\n    self.person.age = 15;\n\n    /**\n     *  注册监听\n     */\n    [self.person addObserver:self forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];\n    /**\n     *  第二次赋值 20\n     */\n    self.person.age = 20;\n    /**\n     *  再次赋值 20\n     */\n    self.person.age = 20;\n\n    /**\n     *  详细见控制台输出,只比较新旧值\n     */\n\n}\n\n/**\n *  监听回调\n */\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSString *,id> *)change context:(void *)context{\n\n    NSLog(@\"\\n change = %@ \\n keyPath =%@ object =%@ context=%@\",change ,keyPath,object,context);\n\n    /** ============================ 控制台输出 ===================================\n     * \n     change = {\n     kind = 1;\n     new = 20;        --------->新的值是 20 注册监听后，observeValueForKeyPath会回调输出\n     old = 15;        --------->旧的值是 15 注册监听前，这个属性初始化时候就是15。\n     }\n     keyPath =age object =<Person: 0x7feec962a9d0> context=(null)\n\n     */\n   /**\n     *  和自动通知输出作对比，这样明白理解。主要是在Person类里面重写了 automaticallyNotifiesObserversForKey 这个方法。以及重写age的setter方法\n     *  由控制台输出结果得出结论，只要监听对象的属性值前后发生改变，observeValueForKeyPath就回调，通知观察者的。\n     */\n\n}\n\n-(void)dealloc{\n\n    /**\n     *  移除观察\n     */\n    [self.person removeObserver:self forKeyPath:@\"age\"];\n}\n```\n\n### Person类的实现\n\n\n```//\n//  Person.m\n//  KVO\n//\n//  Created by XXXXXX on 15/11/9.\n//  Copyright © 2015年 Simon. All rights reserved.\n//\n\n#import \"Person.h\"\n\n@implementation Person\n-(void)setAge:(float)age{\n\n    /**\n     *  判断两值是否一样，一样就不复赋值了\n     */\n    if (_age!= age) {\n        [self willChangeValueForKey:@\"age\"];\n\n        _age = age;\n\n        [self didChangeValueForKey:@\"age\"];\n    }\n}\n\n/**\n *  是否对这个key开启自动发送通知\n *\n *  @param theKey 监听的属性key\n *\n *  @return 布尔值\n */\n+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)theKey {\n    BOOL automatic = NO;\n\n    if ([theKey isEqualToString:@\"age\"])\n    {\n        automatic = NO;\n    }\n    else\n    {\n        automatic=[super automaticallyNotifiesObserversForKey:theKey];\n    }\n    return automatic;\n}\n@end\n```\n\n**观察了自动通知和手动通知，各有所长，看你们喜欢哪个。记住手动通知必须重写方法，只有新旧值前后不一样才会通知。自动通知就不管新旧值是否一样，都说告诉观察者。**\n实现原理可以参考这个博客，写的很详细.\n[[深入浅出Cocoa]详解键值观察（KVO）及其实现机理](http://blog.csdn.net/kesalin/article/details/8194240)\n\n\n","source":"_posts/KVO小记.md","raw":"---\ntitle: KVO小记\ndate: 2016-09-13 11:46:21\ntags: [KVO,KVC,监听]\n---\n\n# KVO浅析\n### KVO Key-Value Observing 键值监听\nKVO是一个观察者模式。观察一个对象的属性，注册一个指定的路径，若这个对象的的属性修改，则KVO会自动通知观察者。\n\n## 使用步骤\n### 1.注册监听\n\n\n```/**\n     *  注册一个监听\n     *\n     *  @param observer 观察者\n     *  @param keyPath  属性名字\n     *  @param options  属性的变化\n     *  @param context  void类型\n     */\n- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void *)context;\n```\n### 2.回调函数\n\n\n```/**\n *  当监控的某个属性的值改变了就会调用\n *\n *  @param keyPath 属性名（哪个属性改了？）\n *  @param object  哪个对象的属性被改了？\n *  @param change  属性的修改情况（属性原来的值、属性最新的值）\n *  @param context void类型\n */\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context\n{\n    NSLog(@\"%@对象的%@属性改变了：%@\", object, keyPath, change);\n}\n```\n\n### 3.移除观察,释放内存，在dealloc函数释放\n\n\n\n```/**\n *  移除观察者\n *\n *  @param observer 观察者\n *  @param keyPath  观察的属性\n */\n- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;\n- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(nullable void *)context NS_AVAILABLE(10_7, 5_0);\n```\n\n\nKVO的观察者是由两种模式的。一种是自动通知，一种是手动通知。\n**自动通知**自动监听对象的属性，不管这个属性的前后属性变化的值是否一样，都会通知观察者。\n手动通知重写willChangeValueForKey:和didChangeValueForKey: 方法通知观察者。\n一般都是用自动通知，方便快捷。\n下面两种写法，都会举例说明。\n\n### 自动通知,主要看监听回调的分析\n场景：模拟人年龄的变化，看接受通知的次数\n\n```- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.person = [[Person alloc]init];\n    self.person.age = 15;\n\n    /**\n     *  注册监听\n     */\n    [self.person addObserver:self forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];\n    /**\n     *  第二次赋值 20\n     */\n    self.person.age = 20;\n    /**\n     *  再次赋值 20\n     */\n    self.person.age = 20;\n    /**\n     *  详细见控制台输出,只比较新旧值\n     */    \n}\n\n/**\n *  监听回调\n */\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSString *,id> *)change context:(void *)context{\n\n    NSLog(@\"\\n change = %@ \\n keyPath =%@ object =%@ context=%@\",change ,keyPath,object,context);\n\n\n\n    /** ============================ 控制台输出 ===================================\n     * \n\n\n     change = {\n     kind = 1;\n     new = 20;        --------->新的值是 20 注册监听后，observeValueForKeyPath会回调输出\n     old = 15;        --------->旧的值是 15 注册监听前，这个属性初始化时候就是15。\n     }\n     keyPath =age object =<Person: 0x7feec962a9d0> context=(null)\n\n\n     change = {\n     kind = 1;\n     new = 20;        --------->新的值是 20 再次传入20，observeValueForKeyPath这个还是会回调输出\n     old = 20;        --------->旧的值是 20\n     }\n     keyPath =age object =<Person: 0x7feec962a9d0> context=(null)\n\n     */\n\n\n    /**\n     *  由控制台输出结果得出结论，只要是对属性进行改变，不管属性的值是否变化，不区分新旧值的变化，observeValueForKeyPath都是回调，通知观察者的。\n     */\n\n}\n\n\n-(void)dealloc{\n\n    /**\n     *  移除观察\n     */\n    [self.person removeObserver:self forKeyPath:@\"age\"];\n}\n```\n\n### 手动通知\n场景：模拟人年龄的变化，看接受通知的次数\n需要在Person类里面重写方法，具体看实现代码\n\n```- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.person = [[Person alloc]init];\n    self.person.age = 15;\n\n    /**\n     *  注册监听\n     */\n    [self.person addObserver:self forKeyPath:@\"age\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];\n    /**\n     *  第二次赋值 20\n     */\n    self.person.age = 20;\n    /**\n     *  再次赋值 20\n     */\n    self.person.age = 20;\n\n    /**\n     *  详细见控制台输出,只比较新旧值\n     */\n\n}\n\n/**\n *  监听回调\n */\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSString *,id> *)change context:(void *)context{\n\n    NSLog(@\"\\n change = %@ \\n keyPath =%@ object =%@ context=%@\",change ,keyPath,object,context);\n\n    /** ============================ 控制台输出 ===================================\n     * \n     change = {\n     kind = 1;\n     new = 20;        --------->新的值是 20 注册监听后，observeValueForKeyPath会回调输出\n     old = 15;        --------->旧的值是 15 注册监听前，这个属性初始化时候就是15。\n     }\n     keyPath =age object =<Person: 0x7feec962a9d0> context=(null)\n\n     */\n   /**\n     *  和自动通知输出作对比，这样明白理解。主要是在Person类里面重写了 automaticallyNotifiesObserversForKey 这个方法。以及重写age的setter方法\n     *  由控制台输出结果得出结论，只要监听对象的属性值前后发生改变，observeValueForKeyPath就回调，通知观察者的。\n     */\n\n}\n\n-(void)dealloc{\n\n    /**\n     *  移除观察\n     */\n    [self.person removeObserver:self forKeyPath:@\"age\"];\n}\n```\n\n### Person类的实现\n\n\n```//\n//  Person.m\n//  KVO\n//\n//  Created by XXXXXX on 15/11/9.\n//  Copyright © 2015年 Simon. All rights reserved.\n//\n\n#import \"Person.h\"\n\n@implementation Person\n-(void)setAge:(float)age{\n\n    /**\n     *  判断两值是否一样，一样就不复赋值了\n     */\n    if (_age!= age) {\n        [self willChangeValueForKey:@\"age\"];\n\n        _age = age;\n\n        [self didChangeValueForKey:@\"age\"];\n    }\n}\n\n/**\n *  是否对这个key开启自动发送通知\n *\n *  @param theKey 监听的属性key\n *\n *  @return 布尔值\n */\n+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)theKey {\n    BOOL automatic = NO;\n\n    if ([theKey isEqualToString:@\"age\"])\n    {\n        automatic = NO;\n    }\n    else\n    {\n        automatic=[super automaticallyNotifiesObserversForKey:theKey];\n    }\n    return automatic;\n}\n@end\n```\n\n**观察了自动通知和手动通知，各有所长，看你们喜欢哪个。记住手动通知必须重写方法，只有新旧值前后不一样才会通知。自动通知就不管新旧值是否一样，都说告诉观察者。**\n实现原理可以参考这个博客，写的很详细.\n[[深入浅出Cocoa]详解键值观察（KVO）及其实现机理](http://blog.csdn.net/kesalin/article/details/8194240)\n\n\n","slug":"KVO小记","published":1,"updated":"2018-12-27T08:05:50.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq6cdakz0000c2fy06qqljgj","content":"<h1 id=\"KVO浅析\"><a href=\"#KVO浅析\" class=\"headerlink\" title=\"KVO浅析\"></a>KVO浅析</h1><h3 id=\"KVO-Key-Value-Observing-键值监听\"><a href=\"#KVO-Key-Value-Observing-键值监听\" class=\"headerlink\" title=\"KVO Key-Value Observing 键值监听\"></a>KVO Key-Value Observing 键值监听</h3><p>KVO是一个观察者模式。观察一个对象的属性，注册一个指定的路径，若这个对象的的属性修改，则KVO会自动通知观察者。</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"1-注册监听\"><a href=\"#1-注册监听\" class=\"headerlink\" title=\"1.注册监听\"></a>1.注册监听</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     *  注册一个监听</span><br><span class=\"line\">     *</span><br><span class=\"line\">     *  @param observer 观察者</span><br><span class=\"line\">     *  @param keyPath  属性名字</span><br><span class=\"line\">     *  @param options  属性的变化</span><br><span class=\"line\">     *  @param context  void类型</span><br><span class=\"line\">     */</span><br><span class=\"line\">- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void *)context;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-回调函数\"><a href=\"#2-回调函数\" class=\"headerlink\" title=\"2.回调函数\"></a>2.回调函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> *  当监控的某个属性的值改变了就会调用</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param keyPath 属性名（哪个属性改了？）</span><br><span class=\"line\"> *  @param object  哪个对象的属性被改了？</span><br><span class=\"line\"> *  @param change  属性的修改情况（属性原来的值、属性最新的值）</span><br><span class=\"line\"> *  @param context void类型</span><br><span class=\"line\"> */</span><br><span class=\"line\">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSLog(@&quot;%@对象的%@属性改变了：%@&quot;, object, keyPath, change);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-移除观察-释放内存，在dealloc函数释放\"><a href=\"#3-移除观察-释放内存，在dealloc函数释放\" class=\"headerlink\" title=\"3.移除观察,释放内存，在dealloc函数释放\"></a>3.移除观察,释放内存，在dealloc函数释放</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> *  移除观察者</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param observer 观察者</span><br><span class=\"line\"> *  @param keyPath  观察的属性</span><br><span class=\"line\"> */</span><br><span class=\"line\">- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;</span><br><span class=\"line\">- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(nullable void *)context NS_AVAILABLE(10_7, 5_0);</span><br></pre></td></tr></table></figure>\n<p>KVO的观察者是由两种模式的。一种是自动通知，一种是手动通知。<br><strong>自动通知</strong>自动监听对象的属性，不管这个属性的前后属性变化的值是否一样，都会通知观察者。<br>手动通知重写willChangeValueForKey:和didChangeValueForKey: 方法通知观察者。<br>一般都是用自动通知，方便快捷。<br>下面两种写法，都会举例说明。</p>\n<h3 id=\"自动通知-主要看监听回调的分析\"><a href=\"#自动通知-主要看监听回调的分析\" class=\"headerlink\" title=\"自动通知,主要看监听回调的分析\"></a>自动通知,主要看监听回调的分析</h3><p>场景：模拟人年龄的变化，看接受通知的次数</p>\n<figure class=\"highlight plain\"><figcaption><span>(void)viewDidLoad &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.person = [[Person alloc]init];</span><br><span class=\"line\">    self.person.age = 15;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  注册监听</span><br><span class=\"line\">     */</span><br><span class=\"line\">    [self.person addObserver:self forKeyPath:@&quot;age&quot; options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  第二次赋值 20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    self.person.age = 20;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  再次赋值 20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    self.person.age = 20;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  详细见控制台输出,只比较新旧值</span><br><span class=\"line\">     */    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  监听回调</span><br><span class=\"line\"> */</span><br><span class=\"line\">-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;\\n change = %@ \\n keyPath =%@ object =%@ context=%@&quot;,change ,keyPath,object,context);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /** ============================ 控制台输出 ===================================</span><br><span class=\"line\">     * </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     change = &#123;</span><br><span class=\"line\">     kind = 1;</span><br><span class=\"line\">     new = 20;        ---------&gt;新的值是 20 注册监听后，observeValueForKeyPath会回调输出</span><br><span class=\"line\">     old = 15;        ---------&gt;旧的值是 15 注册监听前，这个属性初始化时候就是15。</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     keyPath =age object =&lt;Person: 0x7feec962a9d0&gt; context=(null)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     change = &#123;</span><br><span class=\"line\">     kind = 1;</span><br><span class=\"line\">     new = 20;        ---------&gt;新的值是 20 再次传入20，observeValueForKeyPath这个还是会回调输出</span><br><span class=\"line\">     old = 20;        ---------&gt;旧的值是 20</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     keyPath =age object =&lt;Person: 0x7feec962a9d0&gt; context=(null)</span><br><span class=\"line\"></span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  由控制台输出结果得出结论，只要是对属性进行改变，不管属性的值是否变化，不区分新旧值的变化，observeValueForKeyPath都是回调，通知观察者的。</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)dealloc&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  移除观察</span><br><span class=\"line\">     */</span><br><span class=\"line\">    [self.person removeObserver:self forKeyPath:@&quot;age&quot;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"手动通知\"><a href=\"#手动通知\" class=\"headerlink\" title=\"手动通知\"></a>手动通知</h3><p>场景：模拟人年龄的变化，看接受通知的次数<br>需要在Person类里面重写方法，具体看实现代码</p>\n<figure class=\"highlight plain\"><figcaption><span>(void)viewDidLoad &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.person = [[Person alloc]init];</span><br><span class=\"line\">    self.person.age = 15;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  注册监听</span><br><span class=\"line\">     */</span><br><span class=\"line\">    [self.person addObserver:self forKeyPath:@&quot;age&quot; options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  第二次赋值 20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    self.person.age = 20;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  再次赋值 20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    self.person.age = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  详细见控制台输出,只比较新旧值</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  监听回调</span><br><span class=\"line\"> */</span><br><span class=\"line\">-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;\\n change = %@ \\n keyPath =%@ object =%@ context=%@&quot;,change ,keyPath,object,context);</span><br><span class=\"line\"></span><br><span class=\"line\">    /** ============================ 控制台输出 ===================================</span><br><span class=\"line\">     * </span><br><span class=\"line\">     change = &#123;</span><br><span class=\"line\">     kind = 1;</span><br><span class=\"line\">     new = 20;        ---------&gt;新的值是 20 注册监听后，observeValueForKeyPath会回调输出</span><br><span class=\"line\">     old = 15;        ---------&gt;旧的值是 15 注册监听前，这个属性初始化时候就是15。</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     keyPath =age object =&lt;Person: 0x7feec962a9d0&gt; context=(null)</span><br><span class=\"line\"></span><br><span class=\"line\">     */</span><br><span class=\"line\">   /**</span><br><span class=\"line\">     *  和自动通知输出作对比，这样明白理解。主要是在Person类里面重写了 automaticallyNotifiesObserversForKey 这个方法。以及重写age的setter方法</span><br><span class=\"line\">     *  由控制台输出结果得出结论，只要监听对象的属性值前后发生改变，observeValueForKeyPath就回调，通知观察者的。</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)dealloc&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  移除观察</span><br><span class=\"line\">     */</span><br><span class=\"line\">    [self.person removeObserver:self forKeyPath:@&quot;age&quot;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Person类的实现\"><a href=\"#Person类的实现\" class=\"headerlink\" title=\"Person类的实现\"></a>Person类的实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  Person.m</span><br><span class=\"line\">//  KVO</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by XXXXXX on 15/11/9.</span><br><span class=\"line\">//  Copyright © 2015年 Simon. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;Person.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\">-(void)setAge:(float)age&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  判断两值是否一样，一样就不复赋值了</span><br><span class=\"line\">     */</span><br><span class=\"line\">    if (_age!= age) &#123;</span><br><span class=\"line\">        [self willChangeValueForKey:@&quot;age&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        _age = age;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self didChangeValueForKey:@&quot;age&quot;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  是否对这个key开启自动发送通知</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param theKey 监听的属性key</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 布尔值</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)theKey &#123;</span><br><span class=\"line\">    BOOL automatic = NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ([theKey isEqualToString:@&quot;age&quot;])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        automatic = NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        automatic=[super automaticallyNotifiesObserversForKey:theKey];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return automatic;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p><strong>观察了自动通知和手动通知，各有所长，看你们喜欢哪个。记住手动通知必须重写方法，只有新旧值前后不一样才会通知。自动通知就不管新旧值是否一样，都说告诉观察者。</strong><br>实现原理可以参考这个博客，写的很详细.<br><a href=\"http://blog.csdn.net/kesalin/article/details/8194240\" target=\"_blank\" rel=\"noopener\">[深入浅出Cocoa]详解键值观察（KVO）及其实现机理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"KVO浅析\"><a href=\"#KVO浅析\" class=\"headerlink\" title=\"KVO浅析\"></a>KVO浅析</h1><h3 id=\"KVO-Key-Value-Observing-键值监听\"><a href=\"#KVO-Key-Value-Observing-键值监听\" class=\"headerlink\" title=\"KVO Key-Value Observing 键值监听\"></a>KVO Key-Value Observing 键值监听</h3><p>KVO是一个观察者模式。观察一个对象的属性，注册一个指定的路径，若这个对象的的属性修改，则KVO会自动通知观察者。</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"1-注册监听\"><a href=\"#1-注册监听\" class=\"headerlink\" title=\"1.注册监听\"></a>1.注册监听</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     *  注册一个监听</span><br><span class=\"line\">     *</span><br><span class=\"line\">     *  @param observer 观察者</span><br><span class=\"line\">     *  @param keyPath  属性名字</span><br><span class=\"line\">     *  @param options  属性的变化</span><br><span class=\"line\">     *  @param context  void类型</span><br><span class=\"line\">     */</span><br><span class=\"line\">- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void *)context;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-回调函数\"><a href=\"#2-回调函数\" class=\"headerlink\" title=\"2.回调函数\"></a>2.回调函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> *  当监控的某个属性的值改变了就会调用</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param keyPath 属性名（哪个属性改了？）</span><br><span class=\"line\"> *  @param object  哪个对象的属性被改了？</span><br><span class=\"line\"> *  @param change  属性的修改情况（属性原来的值、属性最新的值）</span><br><span class=\"line\"> *  @param context void类型</span><br><span class=\"line\"> */</span><br><span class=\"line\">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSLog(@&quot;%@对象的%@属性改变了：%@&quot;, object, keyPath, change);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-移除观察-释放内存，在dealloc函数释放\"><a href=\"#3-移除观察-释放内存，在dealloc函数释放\" class=\"headerlink\" title=\"3.移除观察,释放内存，在dealloc函数释放\"></a>3.移除观察,释放内存，在dealloc函数释放</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> *  移除观察者</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param observer 观察者</span><br><span class=\"line\"> *  @param keyPath  观察的属性</span><br><span class=\"line\"> */</span><br><span class=\"line\">- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;</span><br><span class=\"line\">- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(nullable void *)context NS_AVAILABLE(10_7, 5_0);</span><br></pre></td></tr></table></figure>\n<p>KVO的观察者是由两种模式的。一种是自动通知，一种是手动通知。<br><strong>自动通知</strong>自动监听对象的属性，不管这个属性的前后属性变化的值是否一样，都会通知观察者。<br>手动通知重写willChangeValueForKey:和didChangeValueForKey: 方法通知观察者。<br>一般都是用自动通知，方便快捷。<br>下面两种写法，都会举例说明。</p>\n<h3 id=\"自动通知-主要看监听回调的分析\"><a href=\"#自动通知-主要看监听回调的分析\" class=\"headerlink\" title=\"自动通知,主要看监听回调的分析\"></a>自动通知,主要看监听回调的分析</h3><p>场景：模拟人年龄的变化，看接受通知的次数</p>\n<figure class=\"highlight plain\"><figcaption><span>(void)viewDidLoad &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.person = [[Person alloc]init];</span><br><span class=\"line\">    self.person.age = 15;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  注册监听</span><br><span class=\"line\">     */</span><br><span class=\"line\">    [self.person addObserver:self forKeyPath:@&quot;age&quot; options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  第二次赋值 20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    self.person.age = 20;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  再次赋值 20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    self.person.age = 20;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  详细见控制台输出,只比较新旧值</span><br><span class=\"line\">     */    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  监听回调</span><br><span class=\"line\"> */</span><br><span class=\"line\">-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;\\n change = %@ \\n keyPath =%@ object =%@ context=%@&quot;,change ,keyPath,object,context);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /** ============================ 控制台输出 ===================================</span><br><span class=\"line\">     * </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     change = &#123;</span><br><span class=\"line\">     kind = 1;</span><br><span class=\"line\">     new = 20;        ---------&gt;新的值是 20 注册监听后，observeValueForKeyPath会回调输出</span><br><span class=\"line\">     old = 15;        ---------&gt;旧的值是 15 注册监听前，这个属性初始化时候就是15。</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     keyPath =age object =&lt;Person: 0x7feec962a9d0&gt; context=(null)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     change = &#123;</span><br><span class=\"line\">     kind = 1;</span><br><span class=\"line\">     new = 20;        ---------&gt;新的值是 20 再次传入20，observeValueForKeyPath这个还是会回调输出</span><br><span class=\"line\">     old = 20;        ---------&gt;旧的值是 20</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     keyPath =age object =&lt;Person: 0x7feec962a9d0&gt; context=(null)</span><br><span class=\"line\"></span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  由控制台输出结果得出结论，只要是对属性进行改变，不管属性的值是否变化，不区分新旧值的变化，observeValueForKeyPath都是回调，通知观察者的。</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)dealloc&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  移除观察</span><br><span class=\"line\">     */</span><br><span class=\"line\">    [self.person removeObserver:self forKeyPath:@&quot;age&quot;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"手动通知\"><a href=\"#手动通知\" class=\"headerlink\" title=\"手动通知\"></a>手动通知</h3><p>场景：模拟人年龄的变化，看接受通知的次数<br>需要在Person类里面重写方法，具体看实现代码</p>\n<figure class=\"highlight plain\"><figcaption><span>(void)viewDidLoad &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    self.person = [[Person alloc]init];</span><br><span class=\"line\">    self.person.age = 15;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  注册监听</span><br><span class=\"line\">     */</span><br><span class=\"line\">    [self.person addObserver:self forKeyPath:@&quot;age&quot; options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  第二次赋值 20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    self.person.age = 20;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  再次赋值 20</span><br><span class=\"line\">     */</span><br><span class=\"line\">    self.person.age = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  详细见控制台输出,只比较新旧值</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  监听回调</span><br><span class=\"line\"> */</span><br><span class=\"line\">-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    NSLog(@&quot;\\n change = %@ \\n keyPath =%@ object =%@ context=%@&quot;,change ,keyPath,object,context);</span><br><span class=\"line\"></span><br><span class=\"line\">    /** ============================ 控制台输出 ===================================</span><br><span class=\"line\">     * </span><br><span class=\"line\">     change = &#123;</span><br><span class=\"line\">     kind = 1;</span><br><span class=\"line\">     new = 20;        ---------&gt;新的值是 20 注册监听后，observeValueForKeyPath会回调输出</span><br><span class=\"line\">     old = 15;        ---------&gt;旧的值是 15 注册监听前，这个属性初始化时候就是15。</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     keyPath =age object =&lt;Person: 0x7feec962a9d0&gt; context=(null)</span><br><span class=\"line\"></span><br><span class=\"line\">     */</span><br><span class=\"line\">   /**</span><br><span class=\"line\">     *  和自动通知输出作对比，这样明白理解。主要是在Person类里面重写了 automaticallyNotifiesObserversForKey 这个方法。以及重写age的setter方法</span><br><span class=\"line\">     *  由控制台输出结果得出结论，只要监听对象的属性值前后发生改变，observeValueForKeyPath就回调，通知观察者的。</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)dealloc&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  移除观察</span><br><span class=\"line\">     */</span><br><span class=\"line\">    [self.person removeObserver:self forKeyPath:@&quot;age&quot;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Person类的实现\"><a href=\"#Person类的实现\" class=\"headerlink\" title=\"Person类的实现\"></a>Person类的实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  Person.m</span><br><span class=\"line\">//  KVO</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by XXXXXX on 15/11/9.</span><br><span class=\"line\">//  Copyright © 2015年 Simon. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;Person.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\">-(void)setAge:(float)age&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  判断两值是否一样，一样就不复赋值了</span><br><span class=\"line\">     */</span><br><span class=\"line\">    if (_age!= age) &#123;</span><br><span class=\"line\">        [self willChangeValueForKey:@&quot;age&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">        _age = age;</span><br><span class=\"line\"></span><br><span class=\"line\">        [self didChangeValueForKey:@&quot;age&quot;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  是否对这个key开启自动发送通知</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param theKey 监听的属性key</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 布尔值</span><br><span class=\"line\"> */</span><br><span class=\"line\">+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)theKey &#123;</span><br><span class=\"line\">    BOOL automatic = NO;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ([theKey isEqualToString:@&quot;age&quot;])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        automatic = NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        automatic=[super automaticallyNotifiesObserversForKey:theKey];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return automatic;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p><strong>观察了自动通知和手动通知，各有所长，看你们喜欢哪个。记住手动通知必须重写方法，只有新旧值前后不一样才会通知。自动通知就不管新旧值是否一样，都说告诉观察者。</strong><br>实现原理可以参考这个博客，写的很详细.<br><a href=\"http://blog.csdn.net/kesalin/article/details/8194240\" target=\"_blank\" rel=\"noopener\">[深入浅出Cocoa]详解键值观察（KVO）及其实现机理</a></p>\n"},{"title":"Mac 下修改文件夹权限","date":"2016-06-22T07:14:51.000Z","_content":"#Mac 下修改文件夹权限\n\n之所以写这个是因为之前使用sudo权限创建的Hexo的文件夹,导致new的MD文件在使用MWeb Lite的时候导致权限问题不能保存,后来发现Mac一个简单的方法批量处理文件和文件夹权限,如下图所示\n![](http://7xrn7f.com1.z0.glb.clouddn.com/16-6-22/67054971.jpg)\n然后就可以爽快的使用啦 ,这个方法比使用命令行是不是更人性化一点(笑).\n图片失效了 ಥ_ಥ哭(看我我要重新整理图床了)\n\n\n","source":"_posts/Mac-下修改文件夹权限.md","raw":"---\ntitle: Mac 下修改文件夹权限\ndate: 2016-06-22 15:14:51\ntags: 文件夹权限\n---\n#Mac 下修改文件夹权限\n\n之所以写这个是因为之前使用sudo权限创建的Hexo的文件夹,导致new的MD文件在使用MWeb Lite的时候导致权限问题不能保存,后来发现Mac一个简单的方法批量处理文件和文件夹权限,如下图所示\n![](http://7xrn7f.com1.z0.glb.clouddn.com/16-6-22/67054971.jpg)\n然后就可以爽快的使用啦 ,这个方法比使用命令行是不是更人性化一点(笑).\n图片失效了 ಥ_ಥ哭(看我我要重新整理图床了)\n\n\n","slug":"Mac-下修改文件夹权限","published":1,"updated":"2018-12-27T08:05:50.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq6cdal70002c2fy4395ytg7","content":"<p>#Mac 下修改文件夹权限</p>\n<p>之所以写这个是因为之前使用sudo权限创建的Hexo的文件夹,导致new的MD文件在使用MWeb Lite的时候导致权限问题不能保存,后来发现Mac一个简单的方法批量处理文件和文件夹权限,如下图所示<br><img src=\"http://7xrn7f.com1.z0.glb.clouddn.com/16-6-22/67054971.jpg\" alt=\"\"><br>然后就可以爽快的使用啦 ,这个方法比使用命令行是不是更人性化一点(笑).<br>图片失效了 ಥ_ಥ哭(看我我要重新整理图床了)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#Mac 下修改文件夹权限</p>\n<p>之所以写这个是因为之前使用sudo权限创建的Hexo的文件夹,导致new的MD文件在使用MWeb Lite的时候导致权限问题不能保存,后来发现Mac一个简单的方法批量处理文件和文件夹权限,如下图所示<br><img src=\"http://7xrn7f.com1.z0.glb.clouddn.com/16-6-22/67054971.jpg\" alt=\"\"><br>然后就可以爽快的使用啦 ,这个方法比使用命令行是不是更人性化一点(笑).<br>图片失效了 ಥ_ಥ哭(看我我要重新整理图床了)</p>\n"},{"title":"iOS测试包自动分发，一键安装，效率提高百分百","date":"2016-06-22T05:22:41.000Z","_content":"一个可以让你快速、方便、一次配置，终生受益的测试包分发教程。你还在傻傻的用airdrop,qq么？\n\n#使用环境：\n\n适合iOS开发者，常需要发布测试包给各类人员，那么以后再也无需多余操作，一键搞定。公司有内网服务器，或用Mac os的同学都可以使用。非越狱手机可以使用，只要正常绑定过证书就没有问题。\n\n以下是教程，相当简单。\n服务器ip以192.168.1.188为例，端口8080\n\n#第一步，配置run script打包ipa并完成ipa上传\n\n部署过程，Xcode中打开target->build phases->add build phase->add run script如图添加如下代码，并根据自己使用环境做一下调整。\n\n```\n# shell script goes here\n\n# compress application.\nif [ \"${CONFIGURATION}\" = \"ad_hoc\" ]; then #判断发布版本\n\n/bin/mkdir $CONFIGURATION_BUILD_DIR/Payload\n\n/bin/cp -R $CONFIGURATION_BUILD_DIR/InstaSoccer.app $CONFIGURATION_BUILD_DIR/Payload\n\n/bin/cp isoccer/icon/iTunesArtwork $CONFIGURATION_BUILD_DIR/iTunesArtwork\n\ncd $CONFIGURATION_BUILD_DIR\n\n# zip up the Instasoccer directory\n\n/usr/bin/zip -r InstaSoccer.ipa Payload iTunesArtwork\n\n/usr/bin/scp InstaSoccer.ipa sshuser@192.168.1.188:~/ipa_publish/ #scp到服务器路径，如果用Mac本机开启服务器，可以用cp到webserver路径\nfi\nexit 0\n```\n\n\n#第二步，部署服务器。\n可以用Mac os的Web共享，也可以自己用python开一个，当然也可以用内网服务器、外网服务器，要求极低，扔几个静态文件就可以。\n关于Mac os 10.8在偏好设置里面已经没有了Web共享，要开启的话需要手动写一下配置文件，方法请自搜。\n [点这里下载样例](http://www.minroad.com/wp-content/uploads/2013/06/%E5%BD%92%E6%A1%A32.zip)\n样例中有2个文件，index.html和Info.plist\nindex.html修改一处，“http://192.168.1.188:8080/Info.plist” 改为你相应的路径\n\n```\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<title>Minroad一键安装</title>\n</head>\n<a style=\"font-size: 5em;\" href=\"itms-services://?action=download-manifest&url=http://192.168.1.188:8080/Info.plist\">install</a>\n<html>\n\n```\nInfo.plist,修改ipa路径（如果你用scp的话请查看你scp后的路径是否与之相同），icon，版本号，bundle id，程序名\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>items</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>assets</key>\n\t\t\t<array>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>kind</key>\n\t\t\t\t\t<string>software-package</string>\n\t\t\t\t\t<key>url</key>\n\t\t\t\t\t<string>http://192.168.1.188:8080/InstaSoccer.ipa</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>kind</key>\n\t\t\t\t\t<string>display-image</string>\n\t\t\t\t\t<key>needs-shine</key>\n\t\t\t\t\t<true/>\n\t\t\t\t\t<key>url</key>\n\t\t\t\t\t<string>http://192.168.1.188:8080/Icon.png</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>kind</key>\n\t\t\t\t\t<string>full-size-image</string>\n\t\t\t\t\t<key>needs-shine</key>\n\t\t\t\t\t<true/>\n\t\t\t\t\t<key>url</key>\n\t\t\t\t\t<string>http://192.168.1.188:8080/Icon.png</string>\n\t\t\t\t</dict>\n\t\t\t</array>\n\t\t\t<key>metadata</key>\n\t\t\t<dict>\n\t\t\t\t<key>bundle-identifier</key>\n\t\t\t\t<string>com.minroad.appid</string>\n\t\t\t\t<key>bundle-version</key>\n\t\t\t\t<string>2.8.2</string>\n\t\t\t\t<key>kind</key>\n\t\t\t\t<string>software</string>\n\t\t\t\t<key>subtitle</key>\n\t\t\t\t<string>一键安装副标题</string>\n\t\t\t\t<key>title</key>\n\t\t\t\t<string>一键安装程序名</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n</dict>\n</plist>\n```\n\n然后在启动webserver, 方法多了去了，提供一个python的，Mac os也可以用\n\ncd 到当前目录\nnohup python -m SimpleHTTPServer 8080 > /dev/null 2>&1 &\n\n点击安装就自动安装了。省心省力！只要将网址收藏，以后分发的事与开发人员就无关咯\n\n文本为转帖 出处在这里 ：http://www.minroad.com/?p=688\n\n\n","source":"_posts/iOS测试包自动分发，一键安装，效率提高百分百.md","raw":"---\ntitle: iOS测试包自动分发，一键安装，效率提高百分百\ndate: 2016-06-22 13:22:41\ntags: iOS测试包\n---\n一个可以让你快速、方便、一次配置，终生受益的测试包分发教程。你还在傻傻的用airdrop,qq么？\n\n#使用环境：\n\n适合iOS开发者，常需要发布测试包给各类人员，那么以后再也无需多余操作，一键搞定。公司有内网服务器，或用Mac os的同学都可以使用。非越狱手机可以使用，只要正常绑定过证书就没有问题。\n\n以下是教程，相当简单。\n服务器ip以192.168.1.188为例，端口8080\n\n#第一步，配置run script打包ipa并完成ipa上传\n\n部署过程，Xcode中打开target->build phases->add build phase->add run script如图添加如下代码，并根据自己使用环境做一下调整。\n\n```\n# shell script goes here\n\n# compress application.\nif [ \"${CONFIGURATION}\" = \"ad_hoc\" ]; then #判断发布版本\n\n/bin/mkdir $CONFIGURATION_BUILD_DIR/Payload\n\n/bin/cp -R $CONFIGURATION_BUILD_DIR/InstaSoccer.app $CONFIGURATION_BUILD_DIR/Payload\n\n/bin/cp isoccer/icon/iTunesArtwork $CONFIGURATION_BUILD_DIR/iTunesArtwork\n\ncd $CONFIGURATION_BUILD_DIR\n\n# zip up the Instasoccer directory\n\n/usr/bin/zip -r InstaSoccer.ipa Payload iTunesArtwork\n\n/usr/bin/scp InstaSoccer.ipa sshuser@192.168.1.188:~/ipa_publish/ #scp到服务器路径，如果用Mac本机开启服务器，可以用cp到webserver路径\nfi\nexit 0\n```\n\n\n#第二步，部署服务器。\n可以用Mac os的Web共享，也可以自己用python开一个，当然也可以用内网服务器、外网服务器，要求极低，扔几个静态文件就可以。\n关于Mac os 10.8在偏好设置里面已经没有了Web共享，要开启的话需要手动写一下配置文件，方法请自搜。\n [点这里下载样例](http://www.minroad.com/wp-content/uploads/2013/06/%E5%BD%92%E6%A1%A32.zip)\n样例中有2个文件，index.html和Info.plist\nindex.html修改一处，“http://192.168.1.188:8080/Info.plist” 改为你相应的路径\n\n```\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<title>Minroad一键安装</title>\n</head>\n<a style=\"font-size: 5em;\" href=\"itms-services://?action=download-manifest&url=http://192.168.1.188:8080/Info.plist\">install</a>\n<html>\n\n```\nInfo.plist,修改ipa路径（如果你用scp的话请查看你scp后的路径是否与之相同），icon，版本号，bundle id，程序名\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>items</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>assets</key>\n\t\t\t<array>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>kind</key>\n\t\t\t\t\t<string>software-package</string>\n\t\t\t\t\t<key>url</key>\n\t\t\t\t\t<string>http://192.168.1.188:8080/InstaSoccer.ipa</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>kind</key>\n\t\t\t\t\t<string>display-image</string>\n\t\t\t\t\t<key>needs-shine</key>\n\t\t\t\t\t<true/>\n\t\t\t\t\t<key>url</key>\n\t\t\t\t\t<string>http://192.168.1.188:8080/Icon.png</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>kind</key>\n\t\t\t\t\t<string>full-size-image</string>\n\t\t\t\t\t<key>needs-shine</key>\n\t\t\t\t\t<true/>\n\t\t\t\t\t<key>url</key>\n\t\t\t\t\t<string>http://192.168.1.188:8080/Icon.png</string>\n\t\t\t\t</dict>\n\t\t\t</array>\n\t\t\t<key>metadata</key>\n\t\t\t<dict>\n\t\t\t\t<key>bundle-identifier</key>\n\t\t\t\t<string>com.minroad.appid</string>\n\t\t\t\t<key>bundle-version</key>\n\t\t\t\t<string>2.8.2</string>\n\t\t\t\t<key>kind</key>\n\t\t\t\t<string>software</string>\n\t\t\t\t<key>subtitle</key>\n\t\t\t\t<string>一键安装副标题</string>\n\t\t\t\t<key>title</key>\n\t\t\t\t<string>一键安装程序名</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n</dict>\n</plist>\n```\n\n然后在启动webserver, 方法多了去了，提供一个python的，Mac os也可以用\n\ncd 到当前目录\nnohup python -m SimpleHTTPServer 8080 > /dev/null 2>&1 &\n\n点击安装就自动安装了。省心省力！只要将网址收藏，以后分发的事与开发人员就无关咯\n\n文本为转帖 出处在这里 ：http://www.minroad.com/?p=688\n\n\n","slug":"iOS测试包自动分发，一键安装，效率提高百分百","published":1,"updated":"2018-12-27T08:05:50.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq6cdalb0004c2fykv2o0wbt","content":"<p>一个可以让你快速、方便、一次配置，终生受益的测试包分发教程。你还在傻傻的用airdrop,qq么？</p>\n<p>#使用环境：</p>\n<p>适合iOS开发者，常需要发布测试包给各类人员，那么以后再也无需多余操作，一键搞定。公司有内网服务器，或用Mac os的同学都可以使用。非越狱手机可以使用，只要正常绑定过证书就没有问题。</p>\n<p>以下是教程，相当简单。<br>服务器ip以192.168.1.188为例，端口8080</p>\n<p>#第一步，配置run script打包ipa并完成ipa上传</p>\n<p>部署过程，Xcode中打开target-&gt;build phases-&gt;add build phase-&gt;add run script如图添加如下代码，并根据自己使用环境做一下调整。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># shell script goes here</span><br><span class=\"line\"></span><br><span class=\"line\"># compress application.</span><br><span class=\"line\">if [ &quot;$&#123;CONFIGURATION&#125;&quot; = &quot;ad_hoc&quot; ]; then #判断发布版本</span><br><span class=\"line\"></span><br><span class=\"line\">/bin/mkdir $CONFIGURATION_BUILD_DIR/Payload</span><br><span class=\"line\"></span><br><span class=\"line\">/bin/cp -R $CONFIGURATION_BUILD_DIR/InstaSoccer.app $CONFIGURATION_BUILD_DIR/Payload</span><br><span class=\"line\"></span><br><span class=\"line\">/bin/cp isoccer/icon/iTunesArtwork $CONFIGURATION_BUILD_DIR/iTunesArtwork</span><br><span class=\"line\"></span><br><span class=\"line\">cd $CONFIGURATION_BUILD_DIR</span><br><span class=\"line\"></span><br><span class=\"line\"># zip up the Instasoccer directory</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/zip -r InstaSoccer.ipa Payload iTunesArtwork</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/scp InstaSoccer.ipa sshuser@192.168.1.188:~/ipa_publish/ #scp到服务器路径，如果用Mac本机开启服务器，可以用cp到webserver路径</span><br><span class=\"line\">fi</span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<p>#第二步，部署服务器。<br>可以用Mac os的Web共享，也可以自己用python开一个，当然也可以用内网服务器、外网服务器，要求极低，扔几个静态文件就可以。<br>关于Mac os 10.8在偏好设置里面已经没有了Web共享，要开启的话需要手动写一下配置文件，方法请自搜。<br> <a href=\"http://www.minroad.com/wp-content/uploads/2013/06/%E5%BD%92%E6%A1%A32.zip\" target=\"_blank\" rel=\"noopener\">点这里下载样例</a><br>样例中有2个文件，index.html和Info.plist<br>index.html修改一处，“<a href=\"http://192.168.1.188:8080/Info.plist”\" target=\"_blank\" rel=\"noopener\">http://192.168.1.188:8080/Info.plist”</a> 改为你相应的路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">&lt;title&gt;Minroad一键安装&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;a style=&quot;font-size: 5em;&quot; href=&quot;itms-services://?action=download-manifest&amp;url=http://192.168.1.188:8080/Info.plist&quot;&gt;install&lt;/a&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br></pre></td></tr></table></figure>\n<p>Info.plist,修改ipa路径（如果你用scp的话请查看你scp后的路径是否与之相同），icon，版本号，bundle id，程序名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">\t&lt;key&gt;items&lt;/key&gt;</span><br><span class=\"line\">\t&lt;array&gt;</span><br><span class=\"line\">\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;assets&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;array&gt;</span><br><span class=\"line\">\t\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;kind&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;software-package&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;url&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;http://192.168.1.188:8080/InstaSoccer.ipa&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;kind&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;display-image&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;needs-shine&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;true/&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;url&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;http://192.168.1.188:8080/Icon.png&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;kind&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;full-size-image&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;needs-shine&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;true/&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;url&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;http://192.168.1.188:8080/Icon.png&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t\t&lt;/array&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;metadata&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;bundle-identifier&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;com.minroad.appid&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;bundle-version&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;2.8.2&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;kind&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;software&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;subtitle&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;一键安装副标题&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;title&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;一键安装程序名&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t&lt;/array&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在启动webserver, 方法多了去了，提供一个python的，Mac os也可以用</p>\n<p>cd 到当前目录<br>nohup python -m SimpleHTTPServer 8080 &gt; /dev/null 2&gt;&amp;1 &amp;</p>\n<p>点击安装就自动安装了。省心省力！只要将网址收藏，以后分发的事与开发人员就无关咯</p>\n<p>文本为转帖 出处在这里 ：<a href=\"http://www.minroad.com/?p=688\" target=\"_blank\" rel=\"noopener\">http://www.minroad.com/?p=688</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个可以让你快速、方便、一次配置，终生受益的测试包分发教程。你还在傻傻的用airdrop,qq么？</p>\n<p>#使用环境：</p>\n<p>适合iOS开发者，常需要发布测试包给各类人员，那么以后再也无需多余操作，一键搞定。公司有内网服务器，或用Mac os的同学都可以使用。非越狱手机可以使用，只要正常绑定过证书就没有问题。</p>\n<p>以下是教程，相当简单。<br>服务器ip以192.168.1.188为例，端口8080</p>\n<p>#第一步，配置run script打包ipa并完成ipa上传</p>\n<p>部署过程，Xcode中打开target-&gt;build phases-&gt;add build phase-&gt;add run script如图添加如下代码，并根据自己使用环境做一下调整。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># shell script goes here</span><br><span class=\"line\"></span><br><span class=\"line\"># compress application.</span><br><span class=\"line\">if [ &quot;$&#123;CONFIGURATION&#125;&quot; = &quot;ad_hoc&quot; ]; then #判断发布版本</span><br><span class=\"line\"></span><br><span class=\"line\">/bin/mkdir $CONFIGURATION_BUILD_DIR/Payload</span><br><span class=\"line\"></span><br><span class=\"line\">/bin/cp -R $CONFIGURATION_BUILD_DIR/InstaSoccer.app $CONFIGURATION_BUILD_DIR/Payload</span><br><span class=\"line\"></span><br><span class=\"line\">/bin/cp isoccer/icon/iTunesArtwork $CONFIGURATION_BUILD_DIR/iTunesArtwork</span><br><span class=\"line\"></span><br><span class=\"line\">cd $CONFIGURATION_BUILD_DIR</span><br><span class=\"line\"></span><br><span class=\"line\"># zip up the Instasoccer directory</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/zip -r InstaSoccer.ipa Payload iTunesArtwork</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/scp InstaSoccer.ipa sshuser@192.168.1.188:~/ipa_publish/ #scp到服务器路径，如果用Mac本机开启服务器，可以用cp到webserver路径</span><br><span class=\"line\">fi</span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<p>#第二步，部署服务器。<br>可以用Mac os的Web共享，也可以自己用python开一个，当然也可以用内网服务器、外网服务器，要求极低，扔几个静态文件就可以。<br>关于Mac os 10.8在偏好设置里面已经没有了Web共享，要开启的话需要手动写一下配置文件，方法请自搜。<br> <a href=\"http://www.minroad.com/wp-content/uploads/2013/06/%E5%BD%92%E6%A1%A32.zip\" target=\"_blank\" rel=\"noopener\">点这里下载样例</a><br>样例中有2个文件，index.html和Info.plist<br>index.html修改一处，“<a href=\"http://192.168.1.188:8080/Info.plist”\" target=\"_blank\" rel=\"noopener\">http://192.168.1.188:8080/Info.plist”</a> 改为你相应的路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">&lt;title&gt;Minroad一键安装&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;a style=&quot;font-size: 5em;&quot; href=&quot;itms-services://?action=download-manifest&amp;url=http://192.168.1.188:8080/Info.plist&quot;&gt;install&lt;/a&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br></pre></td></tr></table></figure>\n<p>Info.plist,修改ipa路径（如果你用scp的话请查看你scp后的路径是否与之相同），icon，版本号，bundle id，程序名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">\t&lt;key&gt;items&lt;/key&gt;</span><br><span class=\"line\">\t&lt;array&gt;</span><br><span class=\"line\">\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;assets&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;array&gt;</span><br><span class=\"line\">\t\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;kind&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;software-package&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;url&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;http://192.168.1.188:8080/InstaSoccer.ipa&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;kind&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;display-image&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;needs-shine&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;true/&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;url&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;http://192.168.1.188:8080/Icon.png&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;kind&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;full-size-image&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;needs-shine&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;true/&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;key&gt;url&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;string&gt;http://192.168.1.188:8080/Icon.png&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t\t&lt;/array&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;metadata&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;bundle-identifier&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;com.minroad.appid&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;bundle-version&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;2.8.2&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;kind&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;software&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;subtitle&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;一键安装副标题&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;title&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;一键安装程序名&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t&lt;/array&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在启动webserver, 方法多了去了，提供一个python的，Mac os也可以用</p>\n<p>cd 到当前目录<br>nohup python -m SimpleHTTPServer 8080 &gt; /dev/null 2&gt;&amp;1 &amp;</p>\n<p>点击安装就自动安装了。省心省力！只要将网址收藏，以后分发的事与开发人员就无关咯</p>\n<p>文本为转帖 出处在这里 ：<a href=\"http://www.minroad.com/?p=688\" target=\"_blank\" rel=\"noopener\">http://www.minroad.com/?p=688</a></p>\n"},{"title":"在Mac下通过HEXO在Github上搭建博客","date":"2016-03-18T06:51:30.000Z","_content":"经过一番折腾，总算是把Hexo给弄好了。在这期间遇到了各种问题，网上有的教程也有点老了，这里就再写一篇。最新的教程可以去Hexo官网查看。\n\n前期准备\n安装Xcode\nHexo的编译可能依赖Xcode。这个直接从App Store上下载就好了，没什么难度。\n\n安装node.js\nHexo是基于node.js的，所以要去官网上下载下来安装。版本可以选择稳定版(4.3.1)也可以选择最新版(5.7.0)。\n需要注意的是，Hexo 3.1.1测试的最低版本为0.12，所以安装的版本不要太旧，之前看到网上装的0.8.4的版本，我也这么装，结果有一大堆的报错。\n\n注册Github账户\n在本地搭建好Hexo后可以将内容同步到github上，可以在网上浏览。\n可以去Github官网上去注册，注册的过程我就不罗嗦了，具体的过程可以去这个页面上跳到Github的那部分去看。\n其中配置SSH Keys的那部分，可以选择不配制，不配置的话以后每次提交的时候就需要手动输入账号密码，如果配置了的话就不需要了。\n\n正式安装\n因为安装包中有些内容在墙外，所以可以换淘宝源，或者用\n`npm install -g hexo-cli –no-optional\n`\n\n来安装\n然后进入你要安装的目录，如\n\n`cd ~/Document/hexo`\n\n然后安装\n\n`hexo init\n`\n安装好之后不要忘记执行\n\n`npm install\n`\n至此，就已经安装完毕了。是不是很简单呢？\n\n后期部署\n添加文章\n\n`hexo new “postName”\n`\n其中postName是博客名。\n\n生成静态页面\n\n`hexo generate\n`\n或者也可以执行缩写\n\nhexo g\n\n本地启动\n执行好上面的命令之后就可以在本地启用服务来看效果了。执行下面的命令：\n\n`hexo sever\n`\n或缩写\n\n`hexo s\n`\n看到 INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 之后，就可以在浏览器中打开页面http://localhost:4000来看了。\n\n上传至Github\n安装git部署插件\n在部署之前，首先我们要确认在你的Github帐号的Repository中有 用户名.github.io 的项目。\n在确认之后，就可以执行命令\n\n`npm install hexo-deployer-git –save\n`\n来安装插件\n\n配置 _config.yml 文件\n在Hexo安装的目录，如 ~/Document/hexo 中找到 _config.yml 文件。打开。\n翻到最后，找到 deploy 字样，改成如下格式：\n\n\n```deploy:\ntype: git\nrepo: https://github.com/用户名/用户名.github.io.git\nbranch: master\n```\n\n\n需要注意的是：冒号后面有一个空格；使用github可以不用写branch那一行。\n如果要使用多个 deployer，可改成如下样式：\n\ndeploy:\n\ntype: git\nrepo:\ntype: heroku\nrepo:\n同步\n输入命令\n\nhexo deploy\n\n或者缩写\n\nhexo d\n\n来执行。\n以后每次执行就可以依次输入下面三行命令：\n\nhexo clean\nhexo generate\nhexo deploy\n\n或者其缩写。\n\n\nHexo基本常用的命令就四个，而且还可以使用组合命令。基本命令如下：\n\n\n\n```hexo g = hexo generate  #生成\nhexo s = hexo server  #启动本地预览\nhexo d = hexo deploy  #远程部署\nhexo n \"文章标题\" = hexo new \"文章标题\"  #新建一篇博文\n```\n　　我通常是选用组合命令，操作更为效率。如果你使用搜狗输入法的话，可以自定义一个短语，比如我输入hs则出现hexo s -g命令。\n\n\n```hexo s -g  #等同先输入hexo g，再输入hexo s\nhexo d -g  #等同先输入hexo g，再输入hexo d\n```\n\n\n\n\n最后优化\n插件\n我使用了几个常见的插件：\n\n从Wordpress迁移到Hexo\n\nnpm install hexo-migrator-wordpress –save\n\n在 WordPress 仪表盘中导出数据(“工具(Tools)” → “发布(Export)” → “文章(WordPress)”)\n插件安装完成后，执行下列命令来迁移所有文章。source 可以是 WordPress 导出的文件路径或网址。\n\nhexo migrate wordpress\n\n站点地图\n\nnpm install hexo-generator-sitemap –save\n\n生成的sitemap.xml可以给搜索引擎收录使用。\n如果要生成百度的sitemap，使用以下命令：\n\nnpm install hexo-generator-baidu-sitemap –save\n\nRSS订阅\n\nnpm install hexo-generator-feed@1.0.3 –save\n\n配置文件里经常看见的/atom.xml就是由这个插件生成的\n\n","source":"_posts/在Mac下通过HEXO在Github上搭建博客.md","raw":"---\ntitle: 在Mac下通过HEXO在Github上搭建博客\ndate: 2016-03-18 14:51:30\ntags: [hexo,Mac, GitHub]\n---\n经过一番折腾，总算是把Hexo给弄好了。在这期间遇到了各种问题，网上有的教程也有点老了，这里就再写一篇。最新的教程可以去Hexo官网查看。\n\n前期准备\n安装Xcode\nHexo的编译可能依赖Xcode。这个直接从App Store上下载就好了，没什么难度。\n\n安装node.js\nHexo是基于node.js的，所以要去官网上下载下来安装。版本可以选择稳定版(4.3.1)也可以选择最新版(5.7.0)。\n需要注意的是，Hexo 3.1.1测试的最低版本为0.12，所以安装的版本不要太旧，之前看到网上装的0.8.4的版本，我也这么装，结果有一大堆的报错。\n\n注册Github账户\n在本地搭建好Hexo后可以将内容同步到github上，可以在网上浏览。\n可以去Github官网上去注册，注册的过程我就不罗嗦了，具体的过程可以去这个页面上跳到Github的那部分去看。\n其中配置SSH Keys的那部分，可以选择不配制，不配置的话以后每次提交的时候就需要手动输入账号密码，如果配置了的话就不需要了。\n\n正式安装\n因为安装包中有些内容在墙外，所以可以换淘宝源，或者用\n`npm install -g hexo-cli –no-optional\n`\n\n来安装\n然后进入你要安装的目录，如\n\n`cd ~/Document/hexo`\n\n然后安装\n\n`hexo init\n`\n安装好之后不要忘记执行\n\n`npm install\n`\n至此，就已经安装完毕了。是不是很简单呢？\n\n后期部署\n添加文章\n\n`hexo new “postName”\n`\n其中postName是博客名。\n\n生成静态页面\n\n`hexo generate\n`\n或者也可以执行缩写\n\nhexo g\n\n本地启动\n执行好上面的命令之后就可以在本地启用服务来看效果了。执行下面的命令：\n\n`hexo sever\n`\n或缩写\n\n`hexo s\n`\n看到 INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 之后，就可以在浏览器中打开页面http://localhost:4000来看了。\n\n上传至Github\n安装git部署插件\n在部署之前，首先我们要确认在你的Github帐号的Repository中有 用户名.github.io 的项目。\n在确认之后，就可以执行命令\n\n`npm install hexo-deployer-git –save\n`\n来安装插件\n\n配置 _config.yml 文件\n在Hexo安装的目录，如 ~/Document/hexo 中找到 _config.yml 文件。打开。\n翻到最后，找到 deploy 字样，改成如下格式：\n\n\n```deploy:\ntype: git\nrepo: https://github.com/用户名/用户名.github.io.git\nbranch: master\n```\n\n\n需要注意的是：冒号后面有一个空格；使用github可以不用写branch那一行。\n如果要使用多个 deployer，可改成如下样式：\n\ndeploy:\n\ntype: git\nrepo:\ntype: heroku\nrepo:\n同步\n输入命令\n\nhexo deploy\n\n或者缩写\n\nhexo d\n\n来执行。\n以后每次执行就可以依次输入下面三行命令：\n\nhexo clean\nhexo generate\nhexo deploy\n\n或者其缩写。\n\n\nHexo基本常用的命令就四个，而且还可以使用组合命令。基本命令如下：\n\n\n\n```hexo g = hexo generate  #生成\nhexo s = hexo server  #启动本地预览\nhexo d = hexo deploy  #远程部署\nhexo n \"文章标题\" = hexo new \"文章标题\"  #新建一篇博文\n```\n　　我通常是选用组合命令，操作更为效率。如果你使用搜狗输入法的话，可以自定义一个短语，比如我输入hs则出现hexo s -g命令。\n\n\n```hexo s -g  #等同先输入hexo g，再输入hexo s\nhexo d -g  #等同先输入hexo g，再输入hexo d\n```\n\n\n\n\n最后优化\n插件\n我使用了几个常见的插件：\n\n从Wordpress迁移到Hexo\n\nnpm install hexo-migrator-wordpress –save\n\n在 WordPress 仪表盘中导出数据(“工具(Tools)” → “发布(Export)” → “文章(WordPress)”)\n插件安装完成后，执行下列命令来迁移所有文章。source 可以是 WordPress 导出的文件路径或网址。\n\nhexo migrate wordpress\n\n站点地图\n\nnpm install hexo-generator-sitemap –save\n\n生成的sitemap.xml可以给搜索引擎收录使用。\n如果要生成百度的sitemap，使用以下命令：\n\nnpm install hexo-generator-baidu-sitemap –save\n\nRSS订阅\n\nnpm install hexo-generator-feed@1.0.3 –save\n\n配置文件里经常看见的/atom.xml就是由这个插件生成的\n\n","slug":"在Mac下通过HEXO在Github上搭建博客","published":1,"updated":"2018-12-27T08:05:50.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq6cdalc0005c2fylma5v90f","content":"<p>经过一番折腾，总算是把Hexo给弄好了。在这期间遇到了各种问题，网上有的教程也有点老了，这里就再写一篇。最新的教程可以去Hexo官网查看。</p>\n<p>前期准备<br>安装Xcode<br>Hexo的编译可能依赖Xcode。这个直接从App Store上下载就好了，没什么难度。</p>\n<p>安装node.js<br>Hexo是基于node.js的，所以要去官网上下载下来安装。版本可以选择稳定版(4.3.1)也可以选择最新版(5.7.0)。<br>需要注意的是，Hexo 3.1.1测试的最低版本为0.12，所以安装的版本不要太旧，之前看到网上装的0.8.4的版本，我也这么装，结果有一大堆的报错。</p>\n<p>注册Github账户<br>在本地搭建好Hexo后可以将内容同步到github上，可以在网上浏览。<br>可以去Github官网上去注册，注册的过程我就不罗嗦了，具体的过程可以去这个页面上跳到Github的那部分去看。<br>其中配置SSH Keys的那部分，可以选择不配制，不配置的话以后每次提交的时候就需要手动输入账号密码，如果配置了的话就不需要了。</p>\n<p>正式安装<br>因为安装包中有些内容在墙外，所以可以换淘宝源，或者用<br><code>npm install -g hexo-cli –no-optional</code></p>\n<p>来安装<br>然后进入你要安装的目录，如</p>\n<p><code>cd ~/Document/hexo</code></p>\n<p>然后安装</p>\n<p><code>hexo init</code><br>安装好之后不要忘记执行</p>\n<p><code>npm install</code><br>至此，就已经安装完毕了。是不是很简单呢？</p>\n<p>后期部署<br>添加文章</p>\n<p><code>hexo new “postName”</code><br>其中postName是博客名。</p>\n<p>生成静态页面</p>\n<p><code>hexo generate</code><br>或者也可以执行缩写</p>\n<p>hexo g</p>\n<p>本地启动<br>执行好上面的命令之后就可以在本地启用服务来看效果了。执行下面的命令：</p>\n<p><code>hexo sever</code><br>或缩写</p>\n<p><code>hexo s</code><br>看到 INFO Hexo is running at <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop. 之后，就可以在浏览器中打开页面<a href=\"http://localhost:4000来看了。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000来看了。</a></p>\n<p>上传至Github<br>安装git部署插件<br>在部署之前，首先我们要确认在你的Github帐号的Repository中有 用户名.github.io 的项目。<br>在确认之后，就可以执行命令</p>\n<p><code>npm install hexo-deployer-git –save</code><br>来安装插件</p>\n<p>配置 _config.yml 文件<br>在Hexo安装的目录，如 ~/Document/hexo 中找到 _config.yml 文件。打开。<br>翻到最后，找到 deploy 字样，改成如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">repo: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n<p>需要注意的是：冒号后面有一个空格；使用github可以不用写branch那一行。<br>如果要使用多个 deployer，可改成如下样式：</p>\n<p>deploy:</p>\n<p>type: git<br>repo:<br>type: heroku<br>repo:<br>同步<br>输入命令</p>\n<p>hexo deploy</p>\n<p>或者缩写</p>\n<p>hexo d</p>\n<p>来执行。<br>以后每次执行就可以依次输入下面三行命令：</p>\n<p>hexo clean<br>hexo generate<br>hexo deploy</p>\n<p>或者其缩写。</p>\n<p>Hexo基本常用的命令就四个，而且还可以使用组合命令。基本命令如下：</p>\n<figure class=\"highlight plain\"><figcaption><span>g </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s = hexo server  #启动本地预览</span><br><span class=\"line\">hexo d = hexo deploy  #远程部署</span><br><span class=\"line\">hexo n &quot;文章标题&quot; = hexo new &quot;文章标题&quot;  #新建一篇博文</span><br></pre></td></tr></table></figure>\n<p>　　我通常是选用组合命令，操作更为效率。如果你使用搜狗输入法的话，可以自定义一个短语，比如我输入hs则出现hexo s -g命令。</p>\n<figure class=\"highlight plain\"><figcaption><span>s -g  #等同先输入hexo g，再输入hexo s</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g  #等同先输入hexo g，再输入hexo d</span><br></pre></td></tr></table></figure>\n<p>最后优化<br>插件<br>我使用了几个常见的插件：</p>\n<p>从Wordpress迁移到Hexo</p>\n<p>npm install hexo-migrator-wordpress –save</p>\n<p>在 WordPress 仪表盘中导出数据(“工具(Tools)” → “发布(Export)” → “文章(WordPress)”)<br>插件安装完成后，执行下列命令来迁移所有文章。source 可以是 WordPress 导出的文件路径或网址。</p>\n<p>hexo migrate wordpress</p>\n<p>站点地图</p>\n<p>npm install hexo-generator-sitemap –save</p>\n<p>生成的sitemap.xml可以给搜索引擎收录使用。<br>如果要生成百度的sitemap，使用以下命令：</p>\n<p>npm install hexo-generator-baidu-sitemap –save</p>\n<p>RSS订阅</p>\n<p>npm install <a href=\"mailto:hexo-generator-feed@1.0.3\" target=\"_blank\" rel=\"noopener\">hexo-generator-feed@1.0.3</a> –save</p>\n<p>配置文件里经常看见的/atom.xml就是由这个插件生成的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>经过一番折腾，总算是把Hexo给弄好了。在这期间遇到了各种问题，网上有的教程也有点老了，这里就再写一篇。最新的教程可以去Hexo官网查看。</p>\n<p>前期准备<br>安装Xcode<br>Hexo的编译可能依赖Xcode。这个直接从App Store上下载就好了，没什么难度。</p>\n<p>安装node.js<br>Hexo是基于node.js的，所以要去官网上下载下来安装。版本可以选择稳定版(4.3.1)也可以选择最新版(5.7.0)。<br>需要注意的是，Hexo 3.1.1测试的最低版本为0.12，所以安装的版本不要太旧，之前看到网上装的0.8.4的版本，我也这么装，结果有一大堆的报错。</p>\n<p>注册Github账户<br>在本地搭建好Hexo后可以将内容同步到github上，可以在网上浏览。<br>可以去Github官网上去注册，注册的过程我就不罗嗦了，具体的过程可以去这个页面上跳到Github的那部分去看。<br>其中配置SSH Keys的那部分，可以选择不配制，不配置的话以后每次提交的时候就需要手动输入账号密码，如果配置了的话就不需要了。</p>\n<p>正式安装<br>因为安装包中有些内容在墙外，所以可以换淘宝源，或者用<br><code>npm install -g hexo-cli –no-optional</code></p>\n<p>来安装<br>然后进入你要安装的目录，如</p>\n<p><code>cd ~/Document/hexo</code></p>\n<p>然后安装</p>\n<p><code>hexo init</code><br>安装好之后不要忘记执行</p>\n<p><code>npm install</code><br>至此，就已经安装完毕了。是不是很简单呢？</p>\n<p>后期部署<br>添加文章</p>\n<p><code>hexo new “postName”</code><br>其中postName是博客名。</p>\n<p>生成静态页面</p>\n<p><code>hexo generate</code><br>或者也可以执行缩写</p>\n<p>hexo g</p>\n<p>本地启动<br>执行好上面的命令之后就可以在本地启用服务来看效果了。执行下面的命令：</p>\n<p><code>hexo sever</code><br>或缩写</p>\n<p><code>hexo s</code><br>看到 INFO Hexo is running at <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop. 之后，就可以在浏览器中打开页面<a href=\"http://localhost:4000来看了。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000来看了。</a></p>\n<p>上传至Github<br>安装git部署插件<br>在部署之前，首先我们要确认在你的Github帐号的Repository中有 用户名.github.io 的项目。<br>在确认之后，就可以执行命令</p>\n<p><code>npm install hexo-deployer-git –save</code><br>来安装插件</p>\n<p>配置 _config.yml 文件<br>在Hexo安装的目录，如 ~/Document/hexo 中找到 _config.yml 文件。打开。<br>翻到最后，找到 deploy 字样，改成如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">repo: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n<p>需要注意的是：冒号后面有一个空格；使用github可以不用写branch那一行。<br>如果要使用多个 deployer，可改成如下样式：</p>\n<p>deploy:</p>\n<p>type: git<br>repo:<br>type: heroku<br>repo:<br>同步<br>输入命令</p>\n<p>hexo deploy</p>\n<p>或者缩写</p>\n<p>hexo d</p>\n<p>来执行。<br>以后每次执行就可以依次输入下面三行命令：</p>\n<p>hexo clean<br>hexo generate<br>hexo deploy</p>\n<p>或者其缩写。</p>\n<p>Hexo基本常用的命令就四个，而且还可以使用组合命令。基本命令如下：</p>\n<figure class=\"highlight plain\"><figcaption><span>g </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s = hexo server  #启动本地预览</span><br><span class=\"line\">hexo d = hexo deploy  #远程部署</span><br><span class=\"line\">hexo n &quot;文章标题&quot; = hexo new &quot;文章标题&quot;  #新建一篇博文</span><br></pre></td></tr></table></figure>\n<p>　　我通常是选用组合命令，操作更为效率。如果你使用搜狗输入法的话，可以自定义一个短语，比如我输入hs则出现hexo s -g命令。</p>\n<figure class=\"highlight plain\"><figcaption><span>s -g  #等同先输入hexo g，再输入hexo s</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g  #等同先输入hexo g，再输入hexo d</span><br></pre></td></tr></table></figure>\n<p>最后优化<br>插件<br>我使用了几个常见的插件：</p>\n<p>从Wordpress迁移到Hexo</p>\n<p>npm install hexo-migrator-wordpress –save</p>\n<p>在 WordPress 仪表盘中导出数据(“工具(Tools)” → “发布(Export)” → “文章(WordPress)”)<br>插件安装完成后，执行下列命令来迁移所有文章。source 可以是 WordPress 导出的文件路径或网址。</p>\n<p>hexo migrate wordpress</p>\n<p>站点地图</p>\n<p>npm install hexo-generator-sitemap –save</p>\n<p>生成的sitemap.xml可以给搜索引擎收录使用。<br>如果要生成百度的sitemap，使用以下命令：</p>\n<p>npm install hexo-generator-baidu-sitemap –save</p>\n<p>RSS订阅</p>\n<p>npm install <a href=\"mailto:hexo-generator-feed@1.0.3\" target=\"_blank\" rel=\"noopener\">hexo-generator-feed@1.0.3</a> –save</p>\n<p>配置文件里经常看见的/atom.xml就是由这个插件生成的</p>\n"},{"title":"BAT面试指南试答百度","date":"2016-06-23T03:36:53.000Z","_content":"\n\n## 1.1 说说OC中load方法和initialize方法的异同。\n\n对于load方法，官方的文档说明如下：\n\nInvoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading. The load message is sent to classes and categories that are both dynamically loaded and statically linked, but only if the newly loaded class or category implements a method that can respond.\n\nThe order of initialization is as follows: * All initializers in any framework you link to. * All +load methods in your image. * All C++ static initializers and C/C++ __attribute__(constructor) functions in your image. * All initializers in frameworks that link to you.\n\nIn addition: * A class’s +load method is called after all of its superclasses’ +load methods. * A category +load method is called after the class’s own +load method.\n\nIn a custom implementation of load you can therefore safely message other unrelated classes from the same image, but any load methods implemented by those classes may not have run yet.\n\n\n_文档也说清楚了，对于load方法，只要文件被引用就会被调用。load方法调用顺序是父类的load方法优先调用于子类的load方法，而本类的load方法优_\n\n对于+initialize方法，官方的文档说明如下：\n\nInitializes the class before it receives its first message.\n\nThe runtime sends initialize to each class in a program just before the class, or any class that inherits from it, is sent its first message from within the program. The runtime sends the initialize message to classes in a thread-safe manner. Superclasses receive this message before their subclasses. The superclass implementation may be called multiple times if subclasses do not implement initialize—the runtime will call the inherited implementation—or if subclasses explicitly call [super initialize]. If you want to protect yourself from being run multiple times, you can structure your implementation along these lines:\n\n \n\n```+ (void)initialize {\n  if (self == [ClassName self]) {\n    // ... do the initialization ...\n  }\n}\n```\n \nBecause initialize is called in a thread-safe manner and the order of initialize being called on different classes is not guaranteed, it’s important to do the minimum amount of work necessary in initialize methods.\n\nSpecifically, any code that takes locks that might be required by other classes in their initialize methods is liable to lead to deadlocks.\n\nTherefore you should not rely on initialize for complex initialization, and should instead limit it to straightforward, class local initialization. initialize is invoked only once per class. If you want to perform independent initialization for the class and for categories of the class, you should implement load methods.\n\n_文档也很明确的说明了：文件被引用并不代表initialize就会被调用，只有类或者子类中第一次有函数调用时，都会调用initialize。initialize是线程安全的，我们不能在initialize方法中加锁，这有可能导致死锁。我们也不应该在函数中实现复杂的代码。initialize只会被调用一次。_\n\n+load和+initialize共同点：\n\n在不考虑开发者主动使用的情况下，系统最多会调用一次\n如果父类和子类都被调用，父类的调用一定在子类之前\n这两个方法不适合做复杂的操作，应该是足够简单\n在使用时都不要过重地依赖于这两个方法，除非真正必要。在使用时一定要注意防止死锁！\n都不需要调用[super load]、[super initialize]\n+load和+initialize不同点：\n\nload方法没有自动释放池，如果做数据处理，需要释放内存，则开发者得自己添加autoreleasepool来管理内存的释放。\n和load不同，即使子类不实现initialize方法，也会把父类的实现继承过来调用一遍。注意的是在此之前，父类的方法已经被执行过一次了，同样不需要super调用。\n## 1.2 说说你对block的理解。\n\n题目问得太简单太宽泛了，作为求职者，不防反问面试官想听听哪些方面的。比如，我们可以反问是想问有哪些block类型？还是block的应用或是block循环引用问题及解决方案？\n\n对于block类型有哪些，看看唐巧的技术博客中的一篇谈Objective-C block的实现，里面讲到Block分为三种，分别是全局block、栈block和堆block。ARC之后，我们并不需要手动copy到堆上，通常都已经交给编译器来完成了。\n\n如果是想问block循环引用的问题及解决方案，大家可以阅读笔者之前所写的一篇如何分析循环引用及如何解决iOS Block循环引用精讲\n\n如果是想问block的应用，那么应用场景就太多了。比如GCD+block就非常多，而我的项目中除了老代码没有修改成block版本，新的代码都是能block来实现的。\n\n## 1.3 说说你对runtime的理解\n\n这个问题与第三个问题一样，都过于宽泛了。还是反问面试官以确定面试官想知道什么吧。\n\n1、消息是如何转发的？\n\n这里有一篇文章讲的就是Runtime Message Forwarding，我认为只有讲讲消息转发的流程就可以了。动态解析过程大致是这样的：通过resolveInstanceMethod允许开发者决定是否动态添加方法，若返回NO，就直接进入doesNotRecognizeSelector，流程结束，否则需要通过class_addMethod动态添加方法并返回YES并进入下一步。forwardingTargetForSelector是第二步，允许开发者决定将由哪个对象响应这个selector，如果返回nil，则直接进入doesNotRecognizeSelector，流程结束，否则需要返回一个对象，但不能是self。进入第三步指定方法签名methodSignatureForSelector，若返回nil，则直接进入doesNotRecognizeSelector且流程结束，否则指定签名，并进入下一步forwardInvocation。forwardInvocation允许开发者修改响应者、方法实现等。若没有实现forwardInvocation，则直接进入doesNotRecognizeSelector，流程结束。\n\n## 2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？\n\n方法是会缓存进来了，不然下次再调用又要重新查一次，效率是不高的。采用散列（哈希）的方式来缓存，查询的效率是比较高的，因此内部会采用散列缓存起来。\n\n## 3、对象的内存是如何布局的？\n\n成员变量（包括父类）都保存在对象本身的存储空间内；本类的实例方法保存在类对象中，本类的类方法保存在元类对象中；父类的实例方法保存在各级super class中，父类的类方法保存在各级super meta class中。\n\n不知道这个答案是否合适！\n\n## 4、runtime有哪些应用场景？\n\n关于runtime的应用是很广泛的，日常开发中所用过的场景：\n\n给category添加属性\nMethod-Swizzling hook方法，然后交换方法实现来达到调用系统方法之前先做一些额外的处理\n埋点处理\n字典与模型互转\n模型自动获取所有属性并转换成SQL语句操作数据库\n想到的也就这么些，大家可以补充！\n\n## 1.4 说说你对MVC和MVVM的理解。\n\nMVC是出现比较早的架构设计模式，而且到现在已经是很成熟了。出现MVVM的原因是MVC中的V越来越复杂，于是才有人想要给V瘦身。\n\n本人在公司的项目中并没有使用过MVVM架构设计模式，一直都是使用MVC的。但是项目比较大，有多个团队同时迭代。我也看了看别的团队的人写的代码，发现他们在网上看过MVVM，于是在项目中纷纷采用MVVM的思想，一个页面分为头、中、尾三个部分，结果他们把这三个部分建立成三个view类，然后写了一堆的delegate回调到V。当我看到这些代码的时候，我还是庆幸的，他们不是我团队的人，代码也不需要我们来维护。\n\n我并不否定MVVM，但是MVVM若配上RAC后，对于代码review没有做好的项目，那是可以害死很多人的，特别是新手接过来之后，什么都不懂，也不会修改他人的代码。我所接触到过的MVVM项目，都是别人的项目，看到很多项目的源代码，包括帮别人改bug的时候，发现调用层次太深，查问题也困难了很多。\n\n其实，采用MVC的项目中，我发现很多人并不充分利用M的作用。我看过很多项目的源代码，M只是添加个属性，并没有做数据处理，而是放在V中处理的。笔者对于可以放在M中处理的数据，是不会交给V做的。比如接口返回来的字段是标识状态的，但是最终要根据状态展示对应的文案，则笔者会增加辅助字段处理，交给M处理。\n\n因此，我个人认为不管是MVC还是MVVM，都有其优缺点，不要过分依赖，也不要理所当然，而应该明确自己的团队是什么样类型的团队。如果都是高级开发者，采用哪种都没有什么问题的；如果基本是初中级，别整什么MVVM了，还是使用传统的MVC吧，谁都可以读懂！\n\n## 1.5 说说UITableView的调优\n\n通常来说，在开发中注意以下问题，可以使列表滚动比较流畅，但是对于特别复杂的列表就需要做额外的优化处理：\n\n重用cell，设置好cellIdentifier\n重用header、footer view，设置好identifier\n若高度固定，直接使用rowHight；若不固定则使用heightForRowAtIndexPath代理方法\n缓存cell的高度、header/footer view的高度\n不要修改view的opaque，默认就是YES,表示不透明度\n不要动态添加子view到cell上，直接在初始时创建，然后做显示与隐藏操作\n尽量不要直接使用cornerRadius，采用镂空图或者Core Graphics API来绘制\n将I/O操作、复杂运算放到子线程中处理，再回到主线程更新UI\n如果列表比较复杂，对于上面的做好后，还是不够流畅，就需要通过Instruments工具来检测哪些地方可以优化了。笔者开源过一个自动计算行高的库，对于一般的app，其性能是可以了：开源HYBMasonryAutoCellHeight自动计算行高，带有高度缓存，对于不同状态下也是会缓存的。\n\n## 1.6 谈谈你对ARC的理解。\n\nARC是编译器帮我们完成的，我们不再手动添加retain、relase、autorelease，而且在运行期还会帮助我们优化。但是ARC并不是万能的，它并不能自我理解循环引用问题，依然需要我们手动解决循环引用的问题。\n\nARC管理都会放到自动释放池中，如果我们需要做一些循环操作，生成大量的临时变量，我们还是需要加一下autoreleasepool，以及时地释放内存。\n\nARC下对于属性修饰符不同，其内存管理策略也不一样：\n\nstrong：强引用，引用计数加1\nweak：弱引用，引用计数没有加1\ncopy：强引用，引用计数加1\nARC下还是有可能出现内存泄露的，内存得不到释放，特别是使用block的时候，一定要学会分析是否形成循环引用。看看如何分析循环引用iOS Block循环引用精讲。\n\n## 2.1 野指针是什么，iOS开发中什么情况下会有野指针？\n\n所谓野指针，是指指向内存已经被释放的内存区的指针。\n\n在iOS开发中，在iOS7下遇到一个bug：当进入播放页面时马上又返回上一个页面，偶尔出现闪退，原因就是出现了野指针（访问了已释放的对象内存区）。当进入播放页面时，就会立刻去解析视频数据，内部是FFMPEG操作，当快速返回上一个页面时，FFMPEG还在操作中，导致访问了已释放的对象。内存这个问题是SDK内部的问题，我们也不能解决，只能抛给SDK提供者来解决。\n\n还有就是在使用block时，不小心也会出现野指针。\n\n","source":"_posts/BAT面试指南试答百度二面.md","raw":"---\ntitle: BAT面试指南试答百度\ndate: 2016-06-23 11:36:53\ntags: [BAT,面试]\n---\n\n\n## 1.1 说说OC中load方法和initialize方法的异同。\n\n对于load方法，官方的文档说明如下：\n\nInvoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading. The load message is sent to classes and categories that are both dynamically loaded and statically linked, but only if the newly loaded class or category implements a method that can respond.\n\nThe order of initialization is as follows: * All initializers in any framework you link to. * All +load methods in your image. * All C++ static initializers and C/C++ __attribute__(constructor) functions in your image. * All initializers in frameworks that link to you.\n\nIn addition: * A class’s +load method is called after all of its superclasses’ +load methods. * A category +load method is called after the class’s own +load method.\n\nIn a custom implementation of load you can therefore safely message other unrelated classes from the same image, but any load methods implemented by those classes may not have run yet.\n\n\n_文档也说清楚了，对于load方法，只要文件被引用就会被调用。load方法调用顺序是父类的load方法优先调用于子类的load方法，而本类的load方法优_\n\n对于+initialize方法，官方的文档说明如下：\n\nInitializes the class before it receives its first message.\n\nThe runtime sends initialize to each class in a program just before the class, or any class that inherits from it, is sent its first message from within the program. The runtime sends the initialize message to classes in a thread-safe manner. Superclasses receive this message before their subclasses. The superclass implementation may be called multiple times if subclasses do not implement initialize—the runtime will call the inherited implementation—or if subclasses explicitly call [super initialize]. If you want to protect yourself from being run multiple times, you can structure your implementation along these lines:\n\n \n\n```+ (void)initialize {\n  if (self == [ClassName self]) {\n    // ... do the initialization ...\n  }\n}\n```\n \nBecause initialize is called in a thread-safe manner and the order of initialize being called on different classes is not guaranteed, it’s important to do the minimum amount of work necessary in initialize methods.\n\nSpecifically, any code that takes locks that might be required by other classes in their initialize methods is liable to lead to deadlocks.\n\nTherefore you should not rely on initialize for complex initialization, and should instead limit it to straightforward, class local initialization. initialize is invoked only once per class. If you want to perform independent initialization for the class and for categories of the class, you should implement load methods.\n\n_文档也很明确的说明了：文件被引用并不代表initialize就会被调用，只有类或者子类中第一次有函数调用时，都会调用initialize。initialize是线程安全的，我们不能在initialize方法中加锁，这有可能导致死锁。我们也不应该在函数中实现复杂的代码。initialize只会被调用一次。_\n\n+load和+initialize共同点：\n\n在不考虑开发者主动使用的情况下，系统最多会调用一次\n如果父类和子类都被调用，父类的调用一定在子类之前\n这两个方法不适合做复杂的操作，应该是足够简单\n在使用时都不要过重地依赖于这两个方法，除非真正必要。在使用时一定要注意防止死锁！\n都不需要调用[super load]、[super initialize]\n+load和+initialize不同点：\n\nload方法没有自动释放池，如果做数据处理，需要释放内存，则开发者得自己添加autoreleasepool来管理内存的释放。\n和load不同，即使子类不实现initialize方法，也会把父类的实现继承过来调用一遍。注意的是在此之前，父类的方法已经被执行过一次了，同样不需要super调用。\n## 1.2 说说你对block的理解。\n\n题目问得太简单太宽泛了，作为求职者，不防反问面试官想听听哪些方面的。比如，我们可以反问是想问有哪些block类型？还是block的应用或是block循环引用问题及解决方案？\n\n对于block类型有哪些，看看唐巧的技术博客中的一篇谈Objective-C block的实现，里面讲到Block分为三种，分别是全局block、栈block和堆block。ARC之后，我们并不需要手动copy到堆上，通常都已经交给编译器来完成了。\n\n如果是想问block循环引用的问题及解决方案，大家可以阅读笔者之前所写的一篇如何分析循环引用及如何解决iOS Block循环引用精讲\n\n如果是想问block的应用，那么应用场景就太多了。比如GCD+block就非常多，而我的项目中除了老代码没有修改成block版本，新的代码都是能block来实现的。\n\n## 1.3 说说你对runtime的理解\n\n这个问题与第三个问题一样，都过于宽泛了。还是反问面试官以确定面试官想知道什么吧。\n\n1、消息是如何转发的？\n\n这里有一篇文章讲的就是Runtime Message Forwarding，我认为只有讲讲消息转发的流程就可以了。动态解析过程大致是这样的：通过resolveInstanceMethod允许开发者决定是否动态添加方法，若返回NO，就直接进入doesNotRecognizeSelector，流程结束，否则需要通过class_addMethod动态添加方法并返回YES并进入下一步。forwardingTargetForSelector是第二步，允许开发者决定将由哪个对象响应这个selector，如果返回nil，则直接进入doesNotRecognizeSelector，流程结束，否则需要返回一个对象，但不能是self。进入第三步指定方法签名methodSignatureForSelector，若返回nil，则直接进入doesNotRecognizeSelector且流程结束，否则指定签名，并进入下一步forwardInvocation。forwardInvocation允许开发者修改响应者、方法实现等。若没有实现forwardInvocation，则直接进入doesNotRecognizeSelector，流程结束。\n\n## 2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？\n\n方法是会缓存进来了，不然下次再调用又要重新查一次，效率是不高的。采用散列（哈希）的方式来缓存，查询的效率是比较高的，因此内部会采用散列缓存起来。\n\n## 3、对象的内存是如何布局的？\n\n成员变量（包括父类）都保存在对象本身的存储空间内；本类的实例方法保存在类对象中，本类的类方法保存在元类对象中；父类的实例方法保存在各级super class中，父类的类方法保存在各级super meta class中。\n\n不知道这个答案是否合适！\n\n## 4、runtime有哪些应用场景？\n\n关于runtime的应用是很广泛的，日常开发中所用过的场景：\n\n给category添加属性\nMethod-Swizzling hook方法，然后交换方法实现来达到调用系统方法之前先做一些额外的处理\n埋点处理\n字典与模型互转\n模型自动获取所有属性并转换成SQL语句操作数据库\n想到的也就这么些，大家可以补充！\n\n## 1.4 说说你对MVC和MVVM的理解。\n\nMVC是出现比较早的架构设计模式，而且到现在已经是很成熟了。出现MVVM的原因是MVC中的V越来越复杂，于是才有人想要给V瘦身。\n\n本人在公司的项目中并没有使用过MVVM架构设计模式，一直都是使用MVC的。但是项目比较大，有多个团队同时迭代。我也看了看别的团队的人写的代码，发现他们在网上看过MVVM，于是在项目中纷纷采用MVVM的思想，一个页面分为头、中、尾三个部分，结果他们把这三个部分建立成三个view类，然后写了一堆的delegate回调到V。当我看到这些代码的时候，我还是庆幸的，他们不是我团队的人，代码也不需要我们来维护。\n\n我并不否定MVVM，但是MVVM若配上RAC后，对于代码review没有做好的项目，那是可以害死很多人的，特别是新手接过来之后，什么都不懂，也不会修改他人的代码。我所接触到过的MVVM项目，都是别人的项目，看到很多项目的源代码，包括帮别人改bug的时候，发现调用层次太深，查问题也困难了很多。\n\n其实，采用MVC的项目中，我发现很多人并不充分利用M的作用。我看过很多项目的源代码，M只是添加个属性，并没有做数据处理，而是放在V中处理的。笔者对于可以放在M中处理的数据，是不会交给V做的。比如接口返回来的字段是标识状态的，但是最终要根据状态展示对应的文案，则笔者会增加辅助字段处理，交给M处理。\n\n因此，我个人认为不管是MVC还是MVVM，都有其优缺点，不要过分依赖，也不要理所当然，而应该明确自己的团队是什么样类型的团队。如果都是高级开发者，采用哪种都没有什么问题的；如果基本是初中级，别整什么MVVM了，还是使用传统的MVC吧，谁都可以读懂！\n\n## 1.5 说说UITableView的调优\n\n通常来说，在开发中注意以下问题，可以使列表滚动比较流畅，但是对于特别复杂的列表就需要做额外的优化处理：\n\n重用cell，设置好cellIdentifier\n重用header、footer view，设置好identifier\n若高度固定，直接使用rowHight；若不固定则使用heightForRowAtIndexPath代理方法\n缓存cell的高度、header/footer view的高度\n不要修改view的opaque，默认就是YES,表示不透明度\n不要动态添加子view到cell上，直接在初始时创建，然后做显示与隐藏操作\n尽量不要直接使用cornerRadius，采用镂空图或者Core Graphics API来绘制\n将I/O操作、复杂运算放到子线程中处理，再回到主线程更新UI\n如果列表比较复杂，对于上面的做好后，还是不够流畅，就需要通过Instruments工具来检测哪些地方可以优化了。笔者开源过一个自动计算行高的库，对于一般的app，其性能是可以了：开源HYBMasonryAutoCellHeight自动计算行高，带有高度缓存，对于不同状态下也是会缓存的。\n\n## 1.6 谈谈你对ARC的理解。\n\nARC是编译器帮我们完成的，我们不再手动添加retain、relase、autorelease，而且在运行期还会帮助我们优化。但是ARC并不是万能的，它并不能自我理解循环引用问题，依然需要我们手动解决循环引用的问题。\n\nARC管理都会放到自动释放池中，如果我们需要做一些循环操作，生成大量的临时变量，我们还是需要加一下autoreleasepool，以及时地释放内存。\n\nARC下对于属性修饰符不同，其内存管理策略也不一样：\n\nstrong：强引用，引用计数加1\nweak：弱引用，引用计数没有加1\ncopy：强引用，引用计数加1\nARC下还是有可能出现内存泄露的，内存得不到释放，特别是使用block的时候，一定要学会分析是否形成循环引用。看看如何分析循环引用iOS Block循环引用精讲。\n\n## 2.1 野指针是什么，iOS开发中什么情况下会有野指针？\n\n所谓野指针，是指指向内存已经被释放的内存区的指针。\n\n在iOS开发中，在iOS7下遇到一个bug：当进入播放页面时马上又返回上一个页面，偶尔出现闪退，原因就是出现了野指针（访问了已释放的对象内存区）。当进入播放页面时，就会立刻去解析视频数据，内部是FFMPEG操作，当快速返回上一个页面时，FFMPEG还在操作中，导致访问了已释放的对象。内存这个问题是SDK内部的问题，我们也不能解决，只能抛给SDK提供者来解决。\n\n还有就是在使用block时，不小心也会出现野指针。\n\n","slug":"BAT面试指南试答百度二面","published":1,"updated":"2018-12-27T08:05:50.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq6cdaqj000lc2fypuxiato4","content":"<h2 id=\"1-1-说说OC中load方法和initialize方法的异同。\"><a href=\"#1-1-说说OC中load方法和initialize方法的异同。\" class=\"headerlink\" title=\"1.1 说说OC中load方法和initialize方法的异同。\"></a>1.1 说说OC中load方法和initialize方法的异同。</h2><p>对于load方法，官方的文档说明如下：</p>\n<p>Invoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading. The load message is sent to classes and categories that are both dynamically loaded and statically linked, but only if the newly loaded class or category implements a method that can respond.</p>\n<p>The order of initialization is as follows: <em> All initializers in any framework you link to. </em> All +load methods in your image. <em> All C++ static initializers and C/C++ <strong>attribute</strong>(constructor) functions in your image. </em> All initializers in frameworks that link to you.</p>\n<p>In addition: <em> A class’s +load method is called after all of its superclasses’ +load methods. </em> A category +load method is called after the class’s own +load method.</p>\n<p>In a custom implementation of load you can therefore safely message other unrelated classes from the same image, but any load methods implemented by those classes may not have run yet.</p>\n<p><em>文档也说清楚了，对于load方法，只要文件被引用就会被调用。load方法调用顺序是父类的load方法优先调用于子类的load方法，而本类的load方法优</em></p>\n<p>对于+initialize方法，官方的文档说明如下：</p>\n<p>Initializes the class before it receives its first message.</p>\n<p>The runtime sends initialize to each class in a program just before the class, or any class that inherits from it, is sent its first message from within the program. The runtime sends the initialize message to classes in a thread-safe manner. Superclasses receive this message before their subclasses. The superclass implementation may be called multiple times if subclasses do not implement initialize—the runtime will call the inherited implementation—or if subclasses explicitly call [super initialize]. If you want to protect yourself from being run multiple times, you can structure your implementation along these lines:</p>\n<figure class=\"highlight plain\"><figcaption><span>(void)initialize &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  if (self == [ClassName self]) &#123;</span><br><span class=\"line\">    // ... do the initialization ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Because initialize is called in a thread-safe manner and the order of initialize being called on different classes is not guaranteed, it’s important to do the minimum amount of work necessary in initialize methods.</p>\n<p>Specifically, any code that takes locks that might be required by other classes in their initialize methods is liable to lead to deadlocks.</p>\n<p>Therefore you should not rely on initialize for complex initialization, and should instead limit it to straightforward, class local initialization. initialize is invoked only once per class. If you want to perform independent initialization for the class and for categories of the class, you should implement load methods.</p>\n<p><em>文档也很明确的说明了：文件被引用并不代表initialize就会被调用，只有类或者子类中第一次有函数调用时，都会调用initialize。initialize是线程安全的，我们不能在initialize方法中加锁，这有可能导致死锁。我们也不应该在函数中实现复杂的代码。initialize只会被调用一次。</em></p>\n<p>+load和+initialize共同点：</p>\n<p>在不考虑开发者主动使用的情况下，系统最多会调用一次<br>如果父类和子类都被调用，父类的调用一定在子类之前<br>这两个方法不适合做复杂的操作，应该是足够简单<br>在使用时都不要过重地依赖于这两个方法，除非真正必要。在使用时一定要注意防止死锁！<br>都不需要调用[super load]、[super initialize]<br>+load和+initialize不同点：</p>\n<p>load方法没有自动释放池，如果做数据处理，需要释放内存，则开发者得自己添加autoreleasepool来管理内存的释放。<br>和load不同，即使子类不实现initialize方法，也会把父类的实现继承过来调用一遍。注意的是在此之前，父类的方法已经被执行过一次了，同样不需要super调用。</p>\n<h2 id=\"1-2-说说你对block的理解。\"><a href=\"#1-2-说说你对block的理解。\" class=\"headerlink\" title=\"1.2 说说你对block的理解。\"></a>1.2 说说你对block的理解。</h2><p>题目问得太简单太宽泛了，作为求职者，不防反问面试官想听听哪些方面的。比如，我们可以反问是想问有哪些block类型？还是block的应用或是block循环引用问题及解决方案？</p>\n<p>对于block类型有哪些，看看唐巧的技术博客中的一篇谈Objective-C block的实现，里面讲到Block分为三种，分别是全局block、栈block和堆block。ARC之后，我们并不需要手动copy到堆上，通常都已经交给编译器来完成了。</p>\n<p>如果是想问block循环引用的问题及解决方案，大家可以阅读笔者之前所写的一篇如何分析循环引用及如何解决iOS Block循环引用精讲</p>\n<p>如果是想问block的应用，那么应用场景就太多了。比如GCD+block就非常多，而我的项目中除了老代码没有修改成block版本，新的代码都是能block来实现的。</p>\n<h2 id=\"1-3-说说你对runtime的理解\"><a href=\"#1-3-说说你对runtime的理解\" class=\"headerlink\" title=\"1.3 说说你对runtime的理解\"></a>1.3 说说你对runtime的理解</h2><p>这个问题与第三个问题一样，都过于宽泛了。还是反问面试官以确定面试官想知道什么吧。</p>\n<p>1、消息是如何转发的？</p>\n<p>这里有一篇文章讲的就是Runtime Message Forwarding，我认为只有讲讲消息转发的流程就可以了。动态解析过程大致是这样的：通过resolveInstanceMethod允许开发者决定是否动态添加方法，若返回NO，就直接进入doesNotRecognizeSelector，流程结束，否则需要通过class_addMethod动态添加方法并返回YES并进入下一步。forwardingTargetForSelector是第二步，允许开发者决定将由哪个对象响应这个selector，如果返回nil，则直接进入doesNotRecognizeSelector，流程结束，否则需要返回一个对象，但不能是self。进入第三步指定方法签名methodSignatureForSelector，若返回nil，则直接进入doesNotRecognizeSelector且流程结束，否则指定签名，并进入下一步forwardInvocation。forwardInvocation允许开发者修改响应者、方法实现等。若没有实现forwardInvocation，则直接进入doesNotRecognizeSelector，流程结束。</p>\n<h2 id=\"2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？\"><a href=\"#2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？\" class=\"headerlink\" title=\"2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？\"></a>2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？</h2><p>方法是会缓存进来了，不然下次再调用又要重新查一次，效率是不高的。采用散列（哈希）的方式来缓存，查询的效率是比较高的，因此内部会采用散列缓存起来。</p>\n<h2 id=\"3、对象的内存是如何布局的？\"><a href=\"#3、对象的内存是如何布局的？\" class=\"headerlink\" title=\"3、对象的内存是如何布局的？\"></a>3、对象的内存是如何布局的？</h2><p>成员变量（包括父类）都保存在对象本身的存储空间内；本类的实例方法保存在类对象中，本类的类方法保存在元类对象中；父类的实例方法保存在各级super class中，父类的类方法保存在各级super meta class中。</p>\n<p>不知道这个答案是否合适！</p>\n<h2 id=\"4、runtime有哪些应用场景？\"><a href=\"#4、runtime有哪些应用场景？\" class=\"headerlink\" title=\"4、runtime有哪些应用场景？\"></a>4、runtime有哪些应用场景？</h2><p>关于runtime的应用是很广泛的，日常开发中所用过的场景：</p>\n<p>给category添加属性<br>Method-Swizzling hook方法，然后交换方法实现来达到调用系统方法之前先做一些额外的处理<br>埋点处理<br>字典与模型互转<br>模型自动获取所有属性并转换成SQL语句操作数据库<br>想到的也就这么些，大家可以补充！</p>\n<h2 id=\"1-4-说说你对MVC和MVVM的理解。\"><a href=\"#1-4-说说你对MVC和MVVM的理解。\" class=\"headerlink\" title=\"1.4 说说你对MVC和MVVM的理解。\"></a>1.4 说说你对MVC和MVVM的理解。</h2><p>MVC是出现比较早的架构设计模式，而且到现在已经是很成熟了。出现MVVM的原因是MVC中的V越来越复杂，于是才有人想要给V瘦身。</p>\n<p>本人在公司的项目中并没有使用过MVVM架构设计模式，一直都是使用MVC的。但是项目比较大，有多个团队同时迭代。我也看了看别的团队的人写的代码，发现他们在网上看过MVVM，于是在项目中纷纷采用MVVM的思想，一个页面分为头、中、尾三个部分，结果他们把这三个部分建立成三个view类，然后写了一堆的delegate回调到V。当我看到这些代码的时候，我还是庆幸的，他们不是我团队的人，代码也不需要我们来维护。</p>\n<p>我并不否定MVVM，但是MVVM若配上RAC后，对于代码review没有做好的项目，那是可以害死很多人的，特别是新手接过来之后，什么都不懂，也不会修改他人的代码。我所接触到过的MVVM项目，都是别人的项目，看到很多项目的源代码，包括帮别人改bug的时候，发现调用层次太深，查问题也困难了很多。</p>\n<p>其实，采用MVC的项目中，我发现很多人并不充分利用M的作用。我看过很多项目的源代码，M只是添加个属性，并没有做数据处理，而是放在V中处理的。笔者对于可以放在M中处理的数据，是不会交给V做的。比如接口返回来的字段是标识状态的，但是最终要根据状态展示对应的文案，则笔者会增加辅助字段处理，交给M处理。</p>\n<p>因此，我个人认为不管是MVC还是MVVM，都有其优缺点，不要过分依赖，也不要理所当然，而应该明确自己的团队是什么样类型的团队。如果都是高级开发者，采用哪种都没有什么问题的；如果基本是初中级，别整什么MVVM了，还是使用传统的MVC吧，谁都可以读懂！</p>\n<h2 id=\"1-5-说说UITableView的调优\"><a href=\"#1-5-说说UITableView的调优\" class=\"headerlink\" title=\"1.5 说说UITableView的调优\"></a>1.5 说说UITableView的调优</h2><p>通常来说，在开发中注意以下问题，可以使列表滚动比较流畅，但是对于特别复杂的列表就需要做额外的优化处理：</p>\n<p>重用cell，设置好cellIdentifier<br>重用header、footer view，设置好identifier<br>若高度固定，直接使用rowHight；若不固定则使用heightForRowAtIndexPath代理方法<br>缓存cell的高度、header/footer view的高度<br>不要修改view的opaque，默认就是YES,表示不透明度<br>不要动态添加子view到cell上，直接在初始时创建，然后做显示与隐藏操作<br>尽量不要直接使用cornerRadius，采用镂空图或者Core Graphics API来绘制<br>将I/O操作、复杂运算放到子线程中处理，再回到主线程更新UI<br>如果列表比较复杂，对于上面的做好后，还是不够流畅，就需要通过Instruments工具来检测哪些地方可以优化了。笔者开源过一个自动计算行高的库，对于一般的app，其性能是可以了：开源HYBMasonryAutoCellHeight自动计算行高，带有高度缓存，对于不同状态下也是会缓存的。</p>\n<h2 id=\"1-6-谈谈你对ARC的理解。\"><a href=\"#1-6-谈谈你对ARC的理解。\" class=\"headerlink\" title=\"1.6 谈谈你对ARC的理解。\"></a>1.6 谈谈你对ARC的理解。</h2><p>ARC是编译器帮我们完成的，我们不再手动添加retain、relase、autorelease，而且在运行期还会帮助我们优化。但是ARC并不是万能的，它并不能自我理解循环引用问题，依然需要我们手动解决循环引用的问题。</p>\n<p>ARC管理都会放到自动释放池中，如果我们需要做一些循环操作，生成大量的临时变量，我们还是需要加一下autoreleasepool，以及时地释放内存。</p>\n<p>ARC下对于属性修饰符不同，其内存管理策略也不一样：</p>\n<p>strong：强引用，引用计数加1<br>weak：弱引用，引用计数没有加1<br>copy：强引用，引用计数加1<br>ARC下还是有可能出现内存泄露的，内存得不到释放，特别是使用block的时候，一定要学会分析是否形成循环引用。看看如何分析循环引用iOS Block循环引用精讲。</p>\n<h2 id=\"2-1-野指针是什么，iOS开发中什么情况下会有野指针？\"><a href=\"#2-1-野指针是什么，iOS开发中什么情况下会有野指针？\" class=\"headerlink\" title=\"2.1 野指针是什么，iOS开发中什么情况下会有野指针？\"></a>2.1 野指针是什么，iOS开发中什么情况下会有野指针？</h2><p>所谓野指针，是指指向内存已经被释放的内存区的指针。</p>\n<p>在iOS开发中，在iOS7下遇到一个bug：当进入播放页面时马上又返回上一个页面，偶尔出现闪退，原因就是出现了野指针（访问了已释放的对象内存区）。当进入播放页面时，就会立刻去解析视频数据，内部是FFMPEG操作，当快速返回上一个页面时，FFMPEG还在操作中，导致访问了已释放的对象。内存这个问题是SDK内部的问题，我们也不能解决，只能抛给SDK提供者来解决。</p>\n<p>还有就是在使用block时，不小心也会出现野指针。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-1-说说OC中load方法和initialize方法的异同。\"><a href=\"#1-1-说说OC中load方法和initialize方法的异同。\" class=\"headerlink\" title=\"1.1 说说OC中load方法和initialize方法的异同。\"></a>1.1 说说OC中load方法和initialize方法的异同。</h2><p>对于load方法，官方的文档说明如下：</p>\n<p>Invoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading. The load message is sent to classes and categories that are both dynamically loaded and statically linked, but only if the newly loaded class or category implements a method that can respond.</p>\n<p>The order of initialization is as follows: <em> All initializers in any framework you link to. </em> All +load methods in your image. <em> All C++ static initializers and C/C++ <strong>attribute</strong>(constructor) functions in your image. </em> All initializers in frameworks that link to you.</p>\n<p>In addition: <em> A class’s +load method is called after all of its superclasses’ +load methods. </em> A category +load method is called after the class’s own +load method.</p>\n<p>In a custom implementation of load you can therefore safely message other unrelated classes from the same image, but any load methods implemented by those classes may not have run yet.</p>\n<p><em>文档也说清楚了，对于load方法，只要文件被引用就会被调用。load方法调用顺序是父类的load方法优先调用于子类的load方法，而本类的load方法优</em></p>\n<p>对于+initialize方法，官方的文档说明如下：</p>\n<p>Initializes the class before it receives its first message.</p>\n<p>The runtime sends initialize to each class in a program just before the class, or any class that inherits from it, is sent its first message from within the program. The runtime sends the initialize message to classes in a thread-safe manner. Superclasses receive this message before their subclasses. The superclass implementation may be called multiple times if subclasses do not implement initialize—the runtime will call the inherited implementation—or if subclasses explicitly call [super initialize]. If you want to protect yourself from being run multiple times, you can structure your implementation along these lines:</p>\n<figure class=\"highlight plain\"><figcaption><span>(void)initialize &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  if (self == [ClassName self]) &#123;</span><br><span class=\"line\">    // ... do the initialization ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Because initialize is called in a thread-safe manner and the order of initialize being called on different classes is not guaranteed, it’s important to do the minimum amount of work necessary in initialize methods.</p>\n<p>Specifically, any code that takes locks that might be required by other classes in their initialize methods is liable to lead to deadlocks.</p>\n<p>Therefore you should not rely on initialize for complex initialization, and should instead limit it to straightforward, class local initialization. initialize is invoked only once per class. If you want to perform independent initialization for the class and for categories of the class, you should implement load methods.</p>\n<p><em>文档也很明确的说明了：文件被引用并不代表initialize就会被调用，只有类或者子类中第一次有函数调用时，都会调用initialize。initialize是线程安全的，我们不能在initialize方法中加锁，这有可能导致死锁。我们也不应该在函数中实现复杂的代码。initialize只会被调用一次。</em></p>\n<p>+load和+initialize共同点：</p>\n<p>在不考虑开发者主动使用的情况下，系统最多会调用一次<br>如果父类和子类都被调用，父类的调用一定在子类之前<br>这两个方法不适合做复杂的操作，应该是足够简单<br>在使用时都不要过重地依赖于这两个方法，除非真正必要。在使用时一定要注意防止死锁！<br>都不需要调用[super load]、[super initialize]<br>+load和+initialize不同点：</p>\n<p>load方法没有自动释放池，如果做数据处理，需要释放内存，则开发者得自己添加autoreleasepool来管理内存的释放。<br>和load不同，即使子类不实现initialize方法，也会把父类的实现继承过来调用一遍。注意的是在此之前，父类的方法已经被执行过一次了，同样不需要super调用。</p>\n<h2 id=\"1-2-说说你对block的理解。\"><a href=\"#1-2-说说你对block的理解。\" class=\"headerlink\" title=\"1.2 说说你对block的理解。\"></a>1.2 说说你对block的理解。</h2><p>题目问得太简单太宽泛了，作为求职者，不防反问面试官想听听哪些方面的。比如，我们可以反问是想问有哪些block类型？还是block的应用或是block循环引用问题及解决方案？</p>\n<p>对于block类型有哪些，看看唐巧的技术博客中的一篇谈Objective-C block的实现，里面讲到Block分为三种，分别是全局block、栈block和堆block。ARC之后，我们并不需要手动copy到堆上，通常都已经交给编译器来完成了。</p>\n<p>如果是想问block循环引用的问题及解决方案，大家可以阅读笔者之前所写的一篇如何分析循环引用及如何解决iOS Block循环引用精讲</p>\n<p>如果是想问block的应用，那么应用场景就太多了。比如GCD+block就非常多，而我的项目中除了老代码没有修改成block版本，新的代码都是能block来实现的。</p>\n<h2 id=\"1-3-说说你对runtime的理解\"><a href=\"#1-3-说说你对runtime的理解\" class=\"headerlink\" title=\"1.3 说说你对runtime的理解\"></a>1.3 说说你对runtime的理解</h2><p>这个问题与第三个问题一样，都过于宽泛了。还是反问面试官以确定面试官想知道什么吧。</p>\n<p>1、消息是如何转发的？</p>\n<p>这里有一篇文章讲的就是Runtime Message Forwarding，我认为只有讲讲消息转发的流程就可以了。动态解析过程大致是这样的：通过resolveInstanceMethod允许开发者决定是否动态添加方法，若返回NO，就直接进入doesNotRecognizeSelector，流程结束，否则需要通过class_addMethod动态添加方法并返回YES并进入下一步。forwardingTargetForSelector是第二步，允许开发者决定将由哪个对象响应这个selector，如果返回nil，则直接进入doesNotRecognizeSelector，流程结束，否则需要返回一个对象，但不能是self。进入第三步指定方法签名methodSignatureForSelector，若返回nil，则直接进入doesNotRecognizeSelector且流程结束，否则指定签名，并进入下一步forwardInvocation。forwardInvocation允许开发者修改响应者、方法实现等。若没有实现forwardInvocation，则直接进入doesNotRecognizeSelector，流程结束。</p>\n<h2 id=\"2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？\"><a href=\"#2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？\" class=\"headerlink\" title=\"2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？\"></a>2、方法调用会被缓存吗？如何缓存过，又是如何查找的呢？</h2><p>方法是会缓存进来了，不然下次再调用又要重新查一次，效率是不高的。采用散列（哈希）的方式来缓存，查询的效率是比较高的，因此内部会采用散列缓存起来。</p>\n<h2 id=\"3、对象的内存是如何布局的？\"><a href=\"#3、对象的内存是如何布局的？\" class=\"headerlink\" title=\"3、对象的内存是如何布局的？\"></a>3、对象的内存是如何布局的？</h2><p>成员变量（包括父类）都保存在对象本身的存储空间内；本类的实例方法保存在类对象中，本类的类方法保存在元类对象中；父类的实例方法保存在各级super class中，父类的类方法保存在各级super meta class中。</p>\n<p>不知道这个答案是否合适！</p>\n<h2 id=\"4、runtime有哪些应用场景？\"><a href=\"#4、runtime有哪些应用场景？\" class=\"headerlink\" title=\"4、runtime有哪些应用场景？\"></a>4、runtime有哪些应用场景？</h2><p>关于runtime的应用是很广泛的，日常开发中所用过的场景：</p>\n<p>给category添加属性<br>Method-Swizzling hook方法，然后交换方法实现来达到调用系统方法之前先做一些额外的处理<br>埋点处理<br>字典与模型互转<br>模型自动获取所有属性并转换成SQL语句操作数据库<br>想到的也就这么些，大家可以补充！</p>\n<h2 id=\"1-4-说说你对MVC和MVVM的理解。\"><a href=\"#1-4-说说你对MVC和MVVM的理解。\" class=\"headerlink\" title=\"1.4 说说你对MVC和MVVM的理解。\"></a>1.4 说说你对MVC和MVVM的理解。</h2><p>MVC是出现比较早的架构设计模式，而且到现在已经是很成熟了。出现MVVM的原因是MVC中的V越来越复杂，于是才有人想要给V瘦身。</p>\n<p>本人在公司的项目中并没有使用过MVVM架构设计模式，一直都是使用MVC的。但是项目比较大，有多个团队同时迭代。我也看了看别的团队的人写的代码，发现他们在网上看过MVVM，于是在项目中纷纷采用MVVM的思想，一个页面分为头、中、尾三个部分，结果他们把这三个部分建立成三个view类，然后写了一堆的delegate回调到V。当我看到这些代码的时候，我还是庆幸的，他们不是我团队的人，代码也不需要我们来维护。</p>\n<p>我并不否定MVVM，但是MVVM若配上RAC后，对于代码review没有做好的项目，那是可以害死很多人的，特别是新手接过来之后，什么都不懂，也不会修改他人的代码。我所接触到过的MVVM项目，都是别人的项目，看到很多项目的源代码，包括帮别人改bug的时候，发现调用层次太深，查问题也困难了很多。</p>\n<p>其实，采用MVC的项目中，我发现很多人并不充分利用M的作用。我看过很多项目的源代码，M只是添加个属性，并没有做数据处理，而是放在V中处理的。笔者对于可以放在M中处理的数据，是不会交给V做的。比如接口返回来的字段是标识状态的，但是最终要根据状态展示对应的文案，则笔者会增加辅助字段处理，交给M处理。</p>\n<p>因此，我个人认为不管是MVC还是MVVM，都有其优缺点，不要过分依赖，也不要理所当然，而应该明确自己的团队是什么样类型的团队。如果都是高级开发者，采用哪种都没有什么问题的；如果基本是初中级，别整什么MVVM了，还是使用传统的MVC吧，谁都可以读懂！</p>\n<h2 id=\"1-5-说说UITableView的调优\"><a href=\"#1-5-说说UITableView的调优\" class=\"headerlink\" title=\"1.5 说说UITableView的调优\"></a>1.5 说说UITableView的调优</h2><p>通常来说，在开发中注意以下问题，可以使列表滚动比较流畅，但是对于特别复杂的列表就需要做额外的优化处理：</p>\n<p>重用cell，设置好cellIdentifier<br>重用header、footer view，设置好identifier<br>若高度固定，直接使用rowHight；若不固定则使用heightForRowAtIndexPath代理方法<br>缓存cell的高度、header/footer view的高度<br>不要修改view的opaque，默认就是YES,表示不透明度<br>不要动态添加子view到cell上，直接在初始时创建，然后做显示与隐藏操作<br>尽量不要直接使用cornerRadius，采用镂空图或者Core Graphics API来绘制<br>将I/O操作、复杂运算放到子线程中处理，再回到主线程更新UI<br>如果列表比较复杂，对于上面的做好后，还是不够流畅，就需要通过Instruments工具来检测哪些地方可以优化了。笔者开源过一个自动计算行高的库，对于一般的app，其性能是可以了：开源HYBMasonryAutoCellHeight自动计算行高，带有高度缓存，对于不同状态下也是会缓存的。</p>\n<h2 id=\"1-6-谈谈你对ARC的理解。\"><a href=\"#1-6-谈谈你对ARC的理解。\" class=\"headerlink\" title=\"1.6 谈谈你对ARC的理解。\"></a>1.6 谈谈你对ARC的理解。</h2><p>ARC是编译器帮我们完成的，我们不再手动添加retain、relase、autorelease，而且在运行期还会帮助我们优化。但是ARC并不是万能的，它并不能自我理解循环引用问题，依然需要我们手动解决循环引用的问题。</p>\n<p>ARC管理都会放到自动释放池中，如果我们需要做一些循环操作，生成大量的临时变量，我们还是需要加一下autoreleasepool，以及时地释放内存。</p>\n<p>ARC下对于属性修饰符不同，其内存管理策略也不一样：</p>\n<p>strong：强引用，引用计数加1<br>weak：弱引用，引用计数没有加1<br>copy：强引用，引用计数加1<br>ARC下还是有可能出现内存泄露的，内存得不到释放，特别是使用block的时候，一定要学会分析是否形成循环引用。看看如何分析循环引用iOS Block循环引用精讲。</p>\n<h2 id=\"2-1-野指针是什么，iOS开发中什么情况下会有野指针？\"><a href=\"#2-1-野指针是什么，iOS开发中什么情况下会有野指针？\" class=\"headerlink\" title=\"2.1 野指针是什么，iOS开发中什么情况下会有野指针？\"></a>2.1 野指针是什么，iOS开发中什么情况下会有野指针？</h2><p>所谓野指针，是指指向内存已经被释放的内存区的指针。</p>\n<p>在iOS开发中，在iOS7下遇到一个bug：当进入播放页面时马上又返回上一个页面，偶尔出现闪退，原因就是出现了野指针（访问了已释放的对象内存区）。当进入播放页面时，就会立刻去解析视频数据，内部是FFMPEG操作，当快速返回上一个页面时，FFMPEG还在操作中，导致访问了已释放的对象。内存这个问题是SDK内部的问题，我们也不能解决，只能抛给SDK提供者来解决。</p>\n<p>还有就是在使用block时，不小心也会出现野指针。</p>\n"},{"title":"招聘一个靠谱的 iOS","date":"2016-06-22T08:21:17.000Z","_content":"\n##  一个靠谱的简历\n\n简历非常能反映一个人的性格和水平，相比于你在学校获得多少奖项，工作经历、项目经历、熟悉的技术等更加关键，如果还有博客和一些 Github 上的项目，好感度++，但记得在去面试前收拾下，我们真的会挨个文件 review 你的开源代码的。我们还喜欢关注一些细节，比如简历里关键字的拼写，看似无关紧要但很能反映出对自己的要求，经常见一个简历中 iOS 这三个字母的拼写就出现 IOS、iOS、ios 三种的，非常不能忍，再列举几个常见问题：\n\n```iPhone -> IPHONE IPhone\nXcode -> XCode xcode\nObjective-C -> Object-C\nJSON -> Json\nHTTP -> Http\n```\n\n\n还有，注意中英文间用一个半角空格隔开，排版会漂亮很多，简历承载的不仅是内容，还有细节和态度，上面这些点往往都反映着面试者的代码风格、做事的认真程度。当然，简历写的很漂亮但面聊之后发现啥都不会的也有，甚至见过来面试上来就跟我说简历是假的，就想求个面试机会这种 - -\n\n##  面试\n\n别迟到，别迟到，别迟到，重要的事说三遍。有变动提前通知 HR，碰到过临时有事没来，和谁都不说一声，打电话过去还要求改个时间的，这种直接拜拜。\n面试时最好准备纸、笔、简历，可能用不上，但很能体现认真程度。有条件的话带着 Mac 和源码，手机中装好所有在简历中出现的 App。\n\n##  关于算法\n\n我们是实用主义，iOS 开发中很少需要自己写复杂的算法，所以不在面试考核标准中。\n\n##  代码规范\n\n这是一个重点考察项，曾经在微博上发过一个风格纠错题：\n![](http://7xvlgm.com2.z0.glb.qiniucdn.com/16-6-22/97051734.jpg)\n\n也曾在面试时让人当场改过，槽点不少，能够有 10 处以上修改的就基本达到标准了（处女座的人在这方面表现都很优秀\n\n## 一个区分度很大的面试题\n\n考察一个面试者基础咋样，基本上问一个 @property 就够了：\n\n- @property 后面可以有哪些修饰符？\n- 什么情况使用 weak 关键字，相比 assign 有什么不同？\n- 怎么用 copy 关键字？\n- 这个写法会出什么问题： `@property (copy) NSMutableArray *array;\n`\n- 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？\n\n这一套问题区分度比较大，如果上面的问题都能回答正确，可以延伸问更深入点的：\n\n- @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\n- @protocol 和 category 中如何使用 @property\n- runtime 如何实现 weak 属性\n\n每个人擅长的领域不一样，我们一般会从简历上找自己写擅长的技术聊，假如自己并不是很熟，最好别写出来或扯出来，万一面试官刚好非常精通这里就露馅了。\n\n## Checklist\n\n总结过些面试题，没坚持下去，后来把这些当 checklist，面试的时候实在没话聊的时候做个提醒，语言、框架、运行机制性质的：\n\n[※]@property中有哪些属性关键字？\n[※]weak属性需要在dealloc中置nil么？\n[※※]@synthesize和@dynamic分别有什么作用？\n[※※※]ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\n[※※※]用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\n[※※※]@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？\n[※※※※※]在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\n\n[※※]objc中向一个nil对象发送消息将会发生什么？\n[※※※]objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？\n[※※※]什么时候会报unrecognized selector的异常？\n[※※※※]一个objc对象如何进行内存布局？（考虑有父类的情况）\n[※※※※]一个objc对象的isa的指针指向什么？有什么作用？\n[※※※※]下面的代码输出什么？\n\n\n```\n@implementation Son : Father\n- (id)init\n{\n    self = [super init];\n    if (self) {\n        NSLog(@\"%@\", NSStringFromClass([self class]));\n        NSLog(@\"%@\", NSStringFromClass([super class]));\n    }\n    return self;\n}\n@end\n```\n\n\n\n[※※※※]runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\n[※※※※]使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？\n[※※※※※]objc中的类方法和实例方法有什么本质区别和联系？\n[※※※※※]_objc_msgForward函数是做什么的，直接调用它将会发生什么？\n[※※※※※]runtime如何实现weak变量的自动置nil？\n[※※※※※]能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\n\n[※※※]runloop和线程有什么关系？\n[※※※]runloop的mode作用是什么？\n[※※※※]以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n[※※※※※]猜想runloop内部是如何实现的？\n\n[※]objc使用什么机制管理对象内存？\n[※※※※]ARC通过什么方式帮助开发者管理内存？\n[※※※※]不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n[※※※※]BAD_ACCESS在什么情况下出现？\n[※※※※※]苹果是如何实现autoreleasepool的？\n\n[※※]使用block时什么情况会发生引用循环，如何解决？\n[※※]在block内如何修改block外部变量？\n[※※※]使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\n\n[※※]GCD的队列（dispatch_queue_t）分哪两种类型？\n[※※※※]如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n[※※※※]dispatch_barrier_async的作用是什么？\n[※※※※※]苹果为什么要废弃dispatch_get_current_queue？\n[※※※※※]以下代码运行结果如何？\n\n\n```- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    NSLog(@\"1\");\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n\n```\n\n\n[※※]`addObserver:forKeyPath:options:context:`各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n[※※※]如何手动触发一个value的KVO\n[※※※]若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？\n[※※※※]KVC的keyPath中的集合运算符如何使用？\n[※※※※]KVC和KVO的keyPath一定是属性么？\n[※※※※※]如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n[※※※※※]apple用什么方式实现对一个对象的KVO？\n\n[※※]IBOutlet连出来的视图属性为什么可以被设置成weak?\n[※※※※※]IB中User Defined Runtime Attributes如何使用？\n\n[※※※]如何调试BAD_ACCESS错误\n[※※※]lldb（gdb）常用的调试命令？\n\n这些小题可以做为讨论的入口，根据面试者的回答再继续聊下去。其中一些题比较底层，是留给屌屌的面试者或者试探评级用的，一般情况并不是重点的考察内容。\n\n## 业务能力\n\n毕竟平常的工作内容不是 runtime、runloop，不怎么会用到底层的黑魔法，80% 的时间都是和搭建页面、写业务逻辑、网络请求打交道。\n要求面试者能够熟练构建 UI，我会找一个面试者做过的页面让他分析下页面结构、约束或者 frame 布局的连法和计算方法；有时也会让面试者说说 UITableView 常用的几个 delegate 和 data source 代理方法，动态 Cell 高度计算什么的；接下来，在手机里随便找一个 App 的页面，让面试者当场说说如果是他写应该用哪些 UI 组件和布局方式等。问几个问题后就能大概了解业务能力了，我们这边重度使用 IB 和 AutoLayout，假如面试者依然使用代码码 UI 也到没关系，有“从良”意愿就很好~\n\n程序架构和一些设计模式如果面试者自己觉得还不错的话也会聊聊，但跪求别说 Singleton 了，用的越多对水平就越表示怀疑。对设计模式自信的我一般问一个问题，抽象工厂模式在 Cocoa SDK 中哪些类中体现？\n架构上 MVC 还是 MVVM 还是 MVP 神马的到是可以聊聊各自的见解，反正也没有正确答案，只要别搞的太离谱就行，比如有的人说网络请求和数据库的操作最好放到 UIView 的子类里面干。\n\n网络请求、数据库等各家都有成熟的封装，基本知道咋用就行。除此之外，我们还会顺带的问下除了 iOS 开发外，还会什么其他编程语言、或者熟悉哪种脚本语言和 Terminal 操作等，甚至还问问是如何翻墙- -，相信这些技能都是很重要的。\n\n## 性格\n\n大家都是写程序的，没啥必要用奇怪的、很难的问题难为对方，更关键的还是性格，和 Team 的风格是不是和的来。一个心态良好的面试者需要有个平常心，不傲娇也不跪舔，表达要正常，经常遇到问一个问题后一两分钟一直处于沉思状态，一句话不说，交流像挤牙膏一样，很是憋屈；还有非常屌屌的，明明不懂仍然强行据理力争，镇得住面试官也罢，撞枪口上就别怪不客气了- - 。决定要不要一个人基本上聊 5 分钟就可以确定了，喜欢水到渠成的感觉，看对眼了挡都挡不住。\n\n## 转载原地址：http://blog.sunnyxx.com\n\n","source":"_posts/招聘一个靠谱的-iOS.md","raw":"---\ntitle: 招聘一个靠谱的 iOS\ndate: 2016-06-22 16:21:17\ntags: iOS\n---\n\n##  一个靠谱的简历\n\n简历非常能反映一个人的性格和水平，相比于你在学校获得多少奖项，工作经历、项目经历、熟悉的技术等更加关键，如果还有博客和一些 Github 上的项目，好感度++，但记得在去面试前收拾下，我们真的会挨个文件 review 你的开源代码的。我们还喜欢关注一些细节，比如简历里关键字的拼写，看似无关紧要但很能反映出对自己的要求，经常见一个简历中 iOS 这三个字母的拼写就出现 IOS、iOS、ios 三种的，非常不能忍，再列举几个常见问题：\n\n```iPhone -> IPHONE IPhone\nXcode -> XCode xcode\nObjective-C -> Object-C\nJSON -> Json\nHTTP -> Http\n```\n\n\n还有，注意中英文间用一个半角空格隔开，排版会漂亮很多，简历承载的不仅是内容，还有细节和态度，上面这些点往往都反映着面试者的代码风格、做事的认真程度。当然，简历写的很漂亮但面聊之后发现啥都不会的也有，甚至见过来面试上来就跟我说简历是假的，就想求个面试机会这种 - -\n\n##  面试\n\n别迟到，别迟到，别迟到，重要的事说三遍。有变动提前通知 HR，碰到过临时有事没来，和谁都不说一声，打电话过去还要求改个时间的，这种直接拜拜。\n面试时最好准备纸、笔、简历，可能用不上，但很能体现认真程度。有条件的话带着 Mac 和源码，手机中装好所有在简历中出现的 App。\n\n##  关于算法\n\n我们是实用主义，iOS 开发中很少需要自己写复杂的算法，所以不在面试考核标准中。\n\n##  代码规范\n\n这是一个重点考察项，曾经在微博上发过一个风格纠错题：\n![](http://7xvlgm.com2.z0.glb.qiniucdn.com/16-6-22/97051734.jpg)\n\n也曾在面试时让人当场改过，槽点不少，能够有 10 处以上修改的就基本达到标准了（处女座的人在这方面表现都很优秀\n\n## 一个区分度很大的面试题\n\n考察一个面试者基础咋样，基本上问一个 @property 就够了：\n\n- @property 后面可以有哪些修饰符？\n- 什么情况使用 weak 关键字，相比 assign 有什么不同？\n- 怎么用 copy 关键字？\n- 这个写法会出什么问题： `@property (copy) NSMutableArray *array;\n`\n- 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？\n\n这一套问题区分度比较大，如果上面的问题都能回答正确，可以延伸问更深入点的：\n\n- @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的\n- @protocol 和 category 中如何使用 @property\n- runtime 如何实现 weak 属性\n\n每个人擅长的领域不一样，我们一般会从简历上找自己写擅长的技术聊，假如自己并不是很熟，最好别写出来或扯出来，万一面试官刚好非常精通这里就露馅了。\n\n## Checklist\n\n总结过些面试题，没坚持下去，后来把这些当 checklist，面试的时候实在没话聊的时候做个提醒，语言、框架、运行机制性质的：\n\n[※]@property中有哪些属性关键字？\n[※]weak属性需要在dealloc中置nil么？\n[※※]@synthesize和@dynamic分别有什么作用？\n[※※※]ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？\n[※※※]用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\n[※※※]@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？\n[※※※※※]在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？\n\n[※※]objc中向一个nil对象发送消息将会发生什么？\n[※※※]objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？\n[※※※]什么时候会报unrecognized selector的异常？\n[※※※※]一个objc对象如何进行内存布局？（考虑有父类的情况）\n[※※※※]一个objc对象的isa的指针指向什么？有什么作用？\n[※※※※]下面的代码输出什么？\n\n\n```\n@implementation Son : Father\n- (id)init\n{\n    self = [super init];\n    if (self) {\n        NSLog(@\"%@\", NSStringFromClass([self class]));\n        NSLog(@\"%@\", NSStringFromClass([super class]));\n    }\n    return self;\n}\n@end\n```\n\n\n\n[※※※※]runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\n[※※※※]使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？\n[※※※※※]objc中的类方法和实例方法有什么本质区别和联系？\n[※※※※※]_objc_msgForward函数是做什么的，直接调用它将会发生什么？\n[※※※※※]runtime如何实现weak变量的自动置nil？\n[※※※※※]能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\n\n[※※※]runloop和线程有什么关系？\n[※※※]runloop的mode作用是什么？\n[※※※※]以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n[※※※※※]猜想runloop内部是如何实现的？\n\n[※]objc使用什么机制管理对象内存？\n[※※※※]ARC通过什么方式帮助开发者管理内存？\n[※※※※]不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n[※※※※]BAD_ACCESS在什么情况下出现？\n[※※※※※]苹果是如何实现autoreleasepool的？\n\n[※※]使用block时什么情况会发生引用循环，如何解决？\n[※※]在block内如何修改block外部变量？\n[※※※]使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\n\n[※※]GCD的队列（dispatch_queue_t）分哪两种类型？\n[※※※※]如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n[※※※※]dispatch_barrier_async的作用是什么？\n[※※※※※]苹果为什么要废弃dispatch_get_current_queue？\n[※※※※※]以下代码运行结果如何？\n\n\n```- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    NSLog(@\"1\");\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        NSLog(@\"2\");\n    });\n    NSLog(@\"3\");\n}\n\n```\n\n\n[※※]`addObserver:forKeyPath:options:context:`各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n[※※※]如何手动触发一个value的KVO\n[※※※]若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？\n[※※※※]KVC的keyPath中的集合运算符如何使用？\n[※※※※]KVC和KVO的keyPath一定是属性么？\n[※※※※※]如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n[※※※※※]apple用什么方式实现对一个对象的KVO？\n\n[※※]IBOutlet连出来的视图属性为什么可以被设置成weak?\n[※※※※※]IB中User Defined Runtime Attributes如何使用？\n\n[※※※]如何调试BAD_ACCESS错误\n[※※※]lldb（gdb）常用的调试命令？\n\n这些小题可以做为讨论的入口，根据面试者的回答再继续聊下去。其中一些题比较底层，是留给屌屌的面试者或者试探评级用的，一般情况并不是重点的考察内容。\n\n## 业务能力\n\n毕竟平常的工作内容不是 runtime、runloop，不怎么会用到底层的黑魔法，80% 的时间都是和搭建页面、写业务逻辑、网络请求打交道。\n要求面试者能够熟练构建 UI，我会找一个面试者做过的页面让他分析下页面结构、约束或者 frame 布局的连法和计算方法；有时也会让面试者说说 UITableView 常用的几个 delegate 和 data source 代理方法，动态 Cell 高度计算什么的；接下来，在手机里随便找一个 App 的页面，让面试者当场说说如果是他写应该用哪些 UI 组件和布局方式等。问几个问题后就能大概了解业务能力了，我们这边重度使用 IB 和 AutoLayout，假如面试者依然使用代码码 UI 也到没关系，有“从良”意愿就很好~\n\n程序架构和一些设计模式如果面试者自己觉得还不错的话也会聊聊，但跪求别说 Singleton 了，用的越多对水平就越表示怀疑。对设计模式自信的我一般问一个问题，抽象工厂模式在 Cocoa SDK 中哪些类中体现？\n架构上 MVC 还是 MVVM 还是 MVP 神马的到是可以聊聊各自的见解，反正也没有正确答案，只要别搞的太离谱就行，比如有的人说网络请求和数据库的操作最好放到 UIView 的子类里面干。\n\n网络请求、数据库等各家都有成熟的封装，基本知道咋用就行。除此之外，我们还会顺带的问下除了 iOS 开发外，还会什么其他编程语言、或者熟悉哪种脚本语言和 Terminal 操作等，甚至还问问是如何翻墙- -，相信这些技能都是很重要的。\n\n## 性格\n\n大家都是写程序的，没啥必要用奇怪的、很难的问题难为对方，更关键的还是性格，和 Team 的风格是不是和的来。一个心态良好的面试者需要有个平常心，不傲娇也不跪舔，表达要正常，经常遇到问一个问题后一两分钟一直处于沉思状态，一句话不说，交流像挤牙膏一样，很是憋屈；还有非常屌屌的，明明不懂仍然强行据理力争，镇得住面试官也罢，撞枪口上就别怪不客气了- - 。决定要不要一个人基本上聊 5 分钟就可以确定了，喜欢水到渠成的感觉，看对眼了挡都挡不住。\n\n## 转载原地址：http://blog.sunnyxx.com\n\n","slug":"招聘一个靠谱的-iOS","published":1,"updated":"2018-12-27T08:05:50.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq6cdaqo000mc2fy1u5kb1om","content":"<h2 id=\"一个靠谱的简历\"><a href=\"#一个靠谱的简历\" class=\"headerlink\" title=\"一个靠谱的简历\"></a>一个靠谱的简历</h2><p>简历非常能反映一个人的性格和水平，相比于你在学校获得多少奖项，工作经历、项目经历、熟悉的技术等更加关键，如果还有博客和一些 Github 上的项目，好感度++，但记得在去面试前收拾下，我们真的会挨个文件 review 你的开源代码的。我们还喜欢关注一些细节，比如简历里关键字的拼写，看似无关紧要但很能反映出对自己的要求，经常见一个简历中 iOS 这三个字母的拼写就出现 IOS、iOS、ios 三种的，非常不能忍，再列举几个常见问题：</p>\n<figure class=\"highlight plain\"><figcaption><span>-> IPHONE IPhone</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xcode -&gt; XCode xcode</span><br><span class=\"line\">Objective-C -&gt; Object-C</span><br><span class=\"line\">JSON -&gt; Json</span><br><span class=\"line\">HTTP -&gt; Http</span><br></pre></td></tr></table></figure>\n<p>还有，注意中英文间用一个半角空格隔开，排版会漂亮很多，简历承载的不仅是内容，还有细节和态度，上面这些点往往都反映着面试者的代码风格、做事的认真程度。当然，简历写的很漂亮但面聊之后发现啥都不会的也有，甚至见过来面试上来就跟我说简历是假的，就想求个面试机会这种 - -</p>\n<h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><p>别迟到，别迟到，别迟到，重要的事说三遍。有变动提前通知 HR，碰到过临时有事没来，和谁都不说一声，打电话过去还要求改个时间的，这种直接拜拜。<br>面试时最好准备纸、笔、简历，可能用不上，但很能体现认真程度。有条件的话带着 Mac 和源码，手机中装好所有在简历中出现的 App。</p>\n<h2 id=\"关于算法\"><a href=\"#关于算法\" class=\"headerlink\" title=\"关于算法\"></a>关于算法</h2><p>我们是实用主义，iOS 开发中很少需要自己写复杂的算法，所以不在面试考核标准中。</p>\n<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><p>这是一个重点考察项，曾经在微博上发过一个风格纠错题：<br><img src=\"http://7xvlgm.com2.z0.glb.qiniucdn.com/16-6-22/97051734.jpg\" alt=\"\"></p>\n<p>也曾在面试时让人当场改过，槽点不少，能够有 10 处以上修改的就基本达到标准了（处女座的人在这方面表现都很优秀</p>\n<h2 id=\"一个区分度很大的面试题\"><a href=\"#一个区分度很大的面试题\" class=\"headerlink\" title=\"一个区分度很大的面试题\"></a>一个区分度很大的面试题</h2><p>考察一个面试者基础咋样，基本上问一个 @property 就够了：</p>\n<ul>\n<li>@property 后面可以有哪些修饰符？</li>\n<li>什么情况使用 weak 关键字，相比 assign 有什么不同？</li>\n<li>怎么用 copy 关键字？</li>\n<li>这个写法会出什么问题： <code>@property (copy) NSMutableArray *array;</code></li>\n<li>如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？</li>\n</ul>\n<p>这一套问题区分度比较大，如果上面的问题都能回答正确，可以延伸问更深入点的：</p>\n<ul>\n<li>@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</li>\n<li>@protocol 和 category 中如何使用 @property</li>\n<li>runtime 如何实现 weak 属性</li>\n</ul>\n<p>每个人擅长的领域不一样，我们一般会从简历上找自己写擅长的技术聊，假如自己并不是很熟，最好别写出来或扯出来，万一面试官刚好非常精通这里就露馅了。</p>\n<h2 id=\"Checklist\"><a href=\"#Checklist\" class=\"headerlink\" title=\"Checklist\"></a>Checklist</h2><p>总结过些面试题，没坚持下去，后来把这些当 checklist，面试的时候实在没话聊的时候做个提醒，语言、框架、运行机制性质的：</p>\n<p>[※]@property中有哪些属性关键字？<br>[※]weak属性需要在dealloc中置nil么？<br>[※※]@synthesize和@dynamic分别有什么作用？<br>[※※※]ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？<br>[※※※]用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？<br>[※※※]@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？<br>[※※※※※]在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</p>\n<p>[※※]objc中向一个nil对象发送消息将会发生什么？<br>[※※※]objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？<br>[※※※]什么时候会报unrecognized selector的异常？<br>[※※※※]一个objc对象如何进行内存布局？（考虑有父类的情况）<br>[※※※※]一个objc对象的isa的指针指向什么？有什么作用？<br>[※※※※]下面的代码输出什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation Son : Father</span><br><span class=\"line\">- (id)init</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, NSStringFromClass([self class]));</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, NSStringFromClass([super class]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>[※※※※]runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）<br>[※※※※]使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？<br>[※※※※※]objc中的类方法和实例方法有什么本质区别和联系？<br>[※※※※※]_objc_msgForward函数是做什么的，直接调用它将会发生什么？<br>[※※※※※]runtime如何实现weak变量的自动置nil？<br>[※※※※※]能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</p>\n<p>[※※※]runloop和线程有什么关系？<br>[※※※]runloop的mode作用是什么？<br>[※※※※]以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？<br>[※※※※※]猜想runloop内部是如何实现的？</p>\n<p>[※]objc使用什么机制管理对象内存？<br>[※※※※]ARC通过什么方式帮助开发者管理内存？<br>[※※※※]不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）<br>[※※※※]BAD_ACCESS在什么情况下出现？<br>[※※※※※]苹果是如何实现autoreleasepool的？</p>\n<p>[※※]使用block时什么情况会发生引用循环，如何解决？<br>[※※]在block内如何修改block外部变量？<br>[※※※]使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</p>\n<p>[※※]GCD的队列（dispatch_queue_t）分哪两种类型？<br>[※※※※]如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）<br>[※※※※]dispatch_barrier_async的作用是什么？<br>[※※※※※]苹果为什么要废弃dispatch_get_current_queue？<br>[※※※※※]以下代码运行结果如何？</p>\n<figure class=\"highlight plain\"><figcaption><span>(void)viewDidLoad</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    NSLog(@&quot;1&quot;);</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        NSLog(@&quot;2&quot;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    NSLog(@&quot;3&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[※※]<code>addObserver:forKeyPath:options:context:</code>各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？<br>[※※※]如何手动触发一个value的KVO<br>[※※※]若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？<br>[※※※※]KVC的keyPath中的集合运算符如何使用？<br>[※※※※]KVC和KVO的keyPath一定是属性么？<br>[※※※※※]如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？<br>[※※※※※]apple用什么方式实现对一个对象的KVO？</p>\n<p>[※※]IBOutlet连出来的视图属性为什么可以被设置成weak?<br>[※※※※※]IB中User Defined Runtime Attributes如何使用？</p>\n<p>[※※※]如何调试BAD_ACCESS错误<br>[※※※]lldb（gdb）常用的调试命令？</p>\n<p>这些小题可以做为讨论的入口，根据面试者的回答再继续聊下去。其中一些题比较底层，是留给屌屌的面试者或者试探评级用的，一般情况并不是重点的考察内容。</p>\n<h2 id=\"业务能力\"><a href=\"#业务能力\" class=\"headerlink\" title=\"业务能力\"></a>业务能力</h2><p>毕竟平常的工作内容不是 runtime、runloop，不怎么会用到底层的黑魔法，80% 的时间都是和搭建页面、写业务逻辑、网络请求打交道。<br>要求面试者能够熟练构建 UI，我会找一个面试者做过的页面让他分析下页面结构、约束或者 frame 布局的连法和计算方法；有时也会让面试者说说 UITableView 常用的几个 delegate 和 data source 代理方法，动态 Cell 高度计算什么的；接下来，在手机里随便找一个 App 的页面，让面试者当场说说如果是他写应该用哪些 UI 组件和布局方式等。问几个问题后就能大概了解业务能力了，我们这边重度使用 IB 和 AutoLayout，假如面试者依然使用代码码 UI 也到没关系，有“从良”意愿就很好~</p>\n<p>程序架构和一些设计模式如果面试者自己觉得还不错的话也会聊聊，但跪求别说 Singleton 了，用的越多对水平就越表示怀疑。对设计模式自信的我一般问一个问题，抽象工厂模式在 Cocoa SDK 中哪些类中体现？<br>架构上 MVC 还是 MVVM 还是 MVP 神马的到是可以聊聊各自的见解，反正也没有正确答案，只要别搞的太离谱就行，比如有的人说网络请求和数据库的操作最好放到 UIView 的子类里面干。</p>\n<p>网络请求、数据库等各家都有成熟的封装，基本知道咋用就行。除此之外，我们还会顺带的问下除了 iOS 开发外，还会什么其他编程语言、或者熟悉哪种脚本语言和 Terminal 操作等，甚至还问问是如何翻墙- -，相信这些技能都是很重要的。</p>\n<h2 id=\"性格\"><a href=\"#性格\" class=\"headerlink\" title=\"性格\"></a>性格</h2><p>大家都是写程序的，没啥必要用奇怪的、很难的问题难为对方，更关键的还是性格，和 Team 的风格是不是和的来。一个心态良好的面试者需要有个平常心，不傲娇也不跪舔，表达要正常，经常遇到问一个问题后一两分钟一直处于沉思状态，一句话不说，交流像挤牙膏一样，很是憋屈；还有非常屌屌的，明明不懂仍然强行据理力争，镇得住面试官也罢，撞枪口上就别怪不客气了- - 。决定要不要一个人基本上聊 5 分钟就可以确定了，喜欢水到渠成的感觉，看对眼了挡都挡不住。</p>\n<h2 id=\"转载原地址：http-blog-sunnyxx-com\"><a href=\"#转载原地址：http-blog-sunnyxx-com\" class=\"headerlink\" title=\"转载原地址：http://blog.sunnyxx.com\"></a>转载原地址：<a href=\"http://blog.sunnyxx.com\" target=\"_blank\" rel=\"noopener\">http://blog.sunnyxx.com</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一个靠谱的简历\"><a href=\"#一个靠谱的简历\" class=\"headerlink\" title=\"一个靠谱的简历\"></a>一个靠谱的简历</h2><p>简历非常能反映一个人的性格和水平，相比于你在学校获得多少奖项，工作经历、项目经历、熟悉的技术等更加关键，如果还有博客和一些 Github 上的项目，好感度++，但记得在去面试前收拾下，我们真的会挨个文件 review 你的开源代码的。我们还喜欢关注一些细节，比如简历里关键字的拼写，看似无关紧要但很能反映出对自己的要求，经常见一个简历中 iOS 这三个字母的拼写就出现 IOS、iOS、ios 三种的，非常不能忍，再列举几个常见问题：</p>\n<figure class=\"highlight plain\"><figcaption><span>-> IPHONE IPhone</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xcode -&gt; XCode xcode</span><br><span class=\"line\">Objective-C -&gt; Object-C</span><br><span class=\"line\">JSON -&gt; Json</span><br><span class=\"line\">HTTP -&gt; Http</span><br></pre></td></tr></table></figure>\n<p>还有，注意中英文间用一个半角空格隔开，排版会漂亮很多，简历承载的不仅是内容，还有细节和态度，上面这些点往往都反映着面试者的代码风格、做事的认真程度。当然，简历写的很漂亮但面聊之后发现啥都不会的也有，甚至见过来面试上来就跟我说简历是假的，就想求个面试机会这种 - -</p>\n<h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><p>别迟到，别迟到，别迟到，重要的事说三遍。有变动提前通知 HR，碰到过临时有事没来，和谁都不说一声，打电话过去还要求改个时间的，这种直接拜拜。<br>面试时最好准备纸、笔、简历，可能用不上，但很能体现认真程度。有条件的话带着 Mac 和源码，手机中装好所有在简历中出现的 App。</p>\n<h2 id=\"关于算法\"><a href=\"#关于算法\" class=\"headerlink\" title=\"关于算法\"></a>关于算法</h2><p>我们是实用主义，iOS 开发中很少需要自己写复杂的算法，所以不在面试考核标准中。</p>\n<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><p>这是一个重点考察项，曾经在微博上发过一个风格纠错题：<br><img src=\"http://7xvlgm.com2.z0.glb.qiniucdn.com/16-6-22/97051734.jpg\" alt=\"\"></p>\n<p>也曾在面试时让人当场改过，槽点不少，能够有 10 处以上修改的就基本达到标准了（处女座的人在这方面表现都很优秀</p>\n<h2 id=\"一个区分度很大的面试题\"><a href=\"#一个区分度很大的面试题\" class=\"headerlink\" title=\"一个区分度很大的面试题\"></a>一个区分度很大的面试题</h2><p>考察一个面试者基础咋样，基本上问一个 @property 就够了：</p>\n<ul>\n<li>@property 后面可以有哪些修饰符？</li>\n<li>什么情况使用 weak 关键字，相比 assign 有什么不同？</li>\n<li>怎么用 copy 关键字？</li>\n<li>这个写法会出什么问题： <code>@property (copy) NSMutableArray *array;</code></li>\n<li>如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？</li>\n</ul>\n<p>这一套问题区分度比较大，如果上面的问题都能回答正确，可以延伸问更深入点的：</p>\n<ul>\n<li>@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</li>\n<li>@protocol 和 category 中如何使用 @property</li>\n<li>runtime 如何实现 weak 属性</li>\n</ul>\n<p>每个人擅长的领域不一样，我们一般会从简历上找自己写擅长的技术聊，假如自己并不是很熟，最好别写出来或扯出来，万一面试官刚好非常精通这里就露馅了。</p>\n<h2 id=\"Checklist\"><a href=\"#Checklist\" class=\"headerlink\" title=\"Checklist\"></a>Checklist</h2><p>总结过些面试题，没坚持下去，后来把这些当 checklist，面试的时候实在没话聊的时候做个提醒，语言、框架、运行机制性质的：</p>\n<p>[※]@property中有哪些属性关键字？<br>[※]weak属性需要在dealloc中置nil么？<br>[※※]@synthesize和@dynamic分别有什么作用？<br>[※※※]ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？<br>[※※※]用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？<br>[※※※]@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？<br>[※※※※※]在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</p>\n<p>[※※]objc中向一个nil对象发送消息将会发生什么？<br>[※※※]objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？<br>[※※※]什么时候会报unrecognized selector的异常？<br>[※※※※]一个objc对象如何进行内存布局？（考虑有父类的情况）<br>[※※※※]一个objc对象的isa的指针指向什么？有什么作用？<br>[※※※※]下面的代码输出什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation Son : Father</span><br><span class=\"line\">- (id)init</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, NSStringFromClass([self class]));</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, NSStringFromClass([super class]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>[※※※※]runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）<br>[※※※※]使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？<br>[※※※※※]objc中的类方法和实例方法有什么本质区别和联系？<br>[※※※※※]_objc_msgForward函数是做什么的，直接调用它将会发生什么？<br>[※※※※※]runtime如何实现weak变量的自动置nil？<br>[※※※※※]能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</p>\n<p>[※※※]runloop和线程有什么关系？<br>[※※※]runloop的mode作用是什么？<br>[※※※※]以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？<br>[※※※※※]猜想runloop内部是如何实现的？</p>\n<p>[※]objc使用什么机制管理对象内存？<br>[※※※※]ARC通过什么方式帮助开发者管理内存？<br>[※※※※]不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）<br>[※※※※]BAD_ACCESS在什么情况下出现？<br>[※※※※※]苹果是如何实现autoreleasepool的？</p>\n<p>[※※]使用block时什么情况会发生引用循环，如何解决？<br>[※※]在block内如何修改block外部变量？<br>[※※※]使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</p>\n<p>[※※]GCD的队列（dispatch_queue_t）分哪两种类型？<br>[※※※※]如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）<br>[※※※※]dispatch_barrier_async的作用是什么？<br>[※※※※※]苹果为什么要废弃dispatch_get_current_queue？<br>[※※※※※]以下代码运行结果如何？</p>\n<figure class=\"highlight plain\"><figcaption><span>(void)viewDidLoad</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    NSLog(@&quot;1&quot;);</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        NSLog(@&quot;2&quot;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    NSLog(@&quot;3&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[※※]<code>addObserver:forKeyPath:options:context:</code>各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？<br>[※※※]如何手动触发一个value的KVO<br>[※※※]若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？<br>[※※※※]KVC的keyPath中的集合运算符如何使用？<br>[※※※※]KVC和KVO的keyPath一定是属性么？<br>[※※※※※]如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？<br>[※※※※※]apple用什么方式实现对一个对象的KVO？</p>\n<p>[※※]IBOutlet连出来的视图属性为什么可以被设置成weak?<br>[※※※※※]IB中User Defined Runtime Attributes如何使用？</p>\n<p>[※※※]如何调试BAD_ACCESS错误<br>[※※※]lldb（gdb）常用的调试命令？</p>\n<p>这些小题可以做为讨论的入口，根据面试者的回答再继续聊下去。其中一些题比较底层，是留给屌屌的面试者或者试探评级用的，一般情况并不是重点的考察内容。</p>\n<h2 id=\"业务能力\"><a href=\"#业务能力\" class=\"headerlink\" title=\"业务能力\"></a>业务能力</h2><p>毕竟平常的工作内容不是 runtime、runloop，不怎么会用到底层的黑魔法，80% 的时间都是和搭建页面、写业务逻辑、网络请求打交道。<br>要求面试者能够熟练构建 UI，我会找一个面试者做过的页面让他分析下页面结构、约束或者 frame 布局的连法和计算方法；有时也会让面试者说说 UITableView 常用的几个 delegate 和 data source 代理方法，动态 Cell 高度计算什么的；接下来，在手机里随便找一个 App 的页面，让面试者当场说说如果是他写应该用哪些 UI 组件和布局方式等。问几个问题后就能大概了解业务能力了，我们这边重度使用 IB 和 AutoLayout，假如面试者依然使用代码码 UI 也到没关系，有“从良”意愿就很好~</p>\n<p>程序架构和一些设计模式如果面试者自己觉得还不错的话也会聊聊，但跪求别说 Singleton 了，用的越多对水平就越表示怀疑。对设计模式自信的我一般问一个问题，抽象工厂模式在 Cocoa SDK 中哪些类中体现？<br>架构上 MVC 还是 MVVM 还是 MVP 神马的到是可以聊聊各自的见解，反正也没有正确答案，只要别搞的太离谱就行，比如有的人说网络请求和数据库的操作最好放到 UIView 的子类里面干。</p>\n<p>网络请求、数据库等各家都有成熟的封装，基本知道咋用就行。除此之外，我们还会顺带的问下除了 iOS 开发外，还会什么其他编程语言、或者熟悉哪种脚本语言和 Terminal 操作等，甚至还问问是如何翻墙- -，相信这些技能都是很重要的。</p>\n<h2 id=\"性格\"><a href=\"#性格\" class=\"headerlink\" title=\"性格\"></a>性格</h2><p>大家都是写程序的，没啥必要用奇怪的、很难的问题难为对方，更关键的还是性格，和 Team 的风格是不是和的来。一个心态良好的面试者需要有个平常心，不傲娇也不跪舔，表达要正常，经常遇到问一个问题后一两分钟一直处于沉思状态，一句话不说，交流像挤牙膏一样，很是憋屈；还有非常屌屌的，明明不懂仍然强行据理力争，镇得住面试官也罢，撞枪口上就别怪不客气了- - 。决定要不要一个人基本上聊 5 分钟就可以确定了，喜欢水到渠成的感觉，看对眼了挡都挡不住。</p>\n<h2 id=\"转载原地址：http-blog-sunnyxx-com\"><a href=\"#转载原地址：http-blog-sunnyxx-com\" class=\"headerlink\" title=\"转载原地址：http://blog.sunnyxx.com\"></a>转载原地址：<a href=\"http://blog.sunnyxx.com\" target=\"_blank\" rel=\"noopener\">http://blog.sunnyxx.com</a></h2>"},{"title":"面试题集锦","date":"2016-03-24T02:45:18.000Z","_content":"OC内存管理遵循“谁创建，谁释放。谁引用，谁管理”的机制，当创建或引用一个对象的时候，需要向它发送alloc  new copy retain 消息，当释放该对象时需要发送release消息，当该对象引用计数为0时，系统将释放该对象，这是OC的手动内存管理机制；iOS5.0之后OC又提供了自动管理机制，ARC(automatic reference counting)，管理机制跟手动管理机制一样，只是不再需要调用 retain release autorelease；它是编译时特性，当你启用ARC时，在适当的位置插入release和autorelease；它引用了strong和weak 关键字，strong修饰的指针变量指向对象时，当指针指向新值,或者指针不再存在时,相关联的对象就会自动释放，而weak修饰的指针变量指向对象，当对象的拥有者指向新值或者不存在时weak修饰的指针则自动置为nil，这是ARC管理机制\n\n线程和进程都是程序运行的基本单元,系统利用这些基本单元来实现系统对应用的并发性,\n区别是他们是不同的操作系统的资源管理方式,进程有自己的地址空间,一个进程crash掉后,在保护模式下,不会对其他进程产生影响,而线程只是进程的不同的执行路径,它没有单独的地址空间,当一个线程Crash掉,整个进程就会crash掉,所以多进程的程序要比多线程的程序更健壮,但是进程之间的切换,耗资源比较大,所以执行效率要低一些,而当一些要求同时进行并且需要共享某些变量的并发操作时,只能使用多线程,不能使用多进程\n\nblock是一个块语句，是一种回调机制，能完成对象与对象之间的通信，基于c语言实现，因为block是在栈上执行的，所以我们需要copy一份到堆上进行手动管理，局部使用时，在MRC机制下，要使用__block修饰，（全局变量等同于局部变量+__block）,在ARC机制下，要使用__weak进行修饰。\n\nstatic  有以下几条  修饰局部变量  只初始化一次  这个局部变量的作用域 只在这个方法哩  修饰全局变量  只在这个文件中使用    修饰方法  只能在这个文件内使用\n\n#import   #include  @class\n#import是oc导入头文件的关键字,#include是c/c++导入头文件的关键字,使用#import会自动导入一次,不会重复导入,相当于#include和#pragma once.@class是告诉编译器某个类的声明,当执行时才会去查看类的实现文件,使用@class可以解决头文件相互包含的问题\n\nid 类型 是OC中得任意类型  因为OC的动态特性  只有在运行的时候才知道对象时是什么类型的\nid 声明的对象有什么特性？\nid类型是通用指针类型：因为通过指针，也就是内存地址来引用对象，所以可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。然后可以将该值赋给任何对象变量。因为无论在哪里，对象总是携带它的isa成员，所以即使将它存储在id类型的通用对象变量中，也总是可以确定它的类。\n\n什么是TCP连接的三次握手\n第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。\n\n视频播放:  最简单的是系统自带的MPMoviePlayerViewController\n\n对象间是怎么通信的  :打点  代理delegate   block  KVO/KVC\n\nOC优缺点:\n优点:OC的动态特性 (动态类型   动态加载   动态绑定 )   支持OC和C/C++  混编\n缺点:OC 不支持命名空间(加前缀来区别)  不支持多继承  可以通过类别来实现\n\n类别的作用:\n类的扩充  类的私有化  类的实现\n\nget post 区别\n\n1. get是从服务器上获取数据，post是向服务器传送数据。\n2. get是把参数数据队列加到URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。\n3. 对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form表单获取提交的数据。\n4. get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。\n5. get安全性非常低，post安全性较高\n\nUDP/TCP的区别\n\nTCP—传输控制协议 ,提供的是面向连接可靠的字节流服务. 当客户端和服务器彼此交换数据前,必须在双方建立一个TCP连接 之后才能传输数据,TCP提供超时重发 丢弃重复数据 检验数据  流量控制等 保证数据从一端到另一端\n\nUDP- 用户数据包协议 是一个简单的面向数据报的传输层协议 UDP不提供可靠连接 它仅仅是吧应用程序传给IP层的数据报发送出去 但是并不能保证他们能到达目的地,由于UDP 在传输数据前不再客户端和服务端建立一个可靠的连接  且没有超时重发机制 所以传输速度很快.\n\nKVC/KVO\nKVC  Key-values-coding  他是一种可以直接通过字符串的名字 即Key 来访问 属性的方式 而不是通过调用setter   getter 方法来访问支持类对象和内建基本数据类型 简化代码\n\nKVO  它是一种观察者模式 Key-valus-observing  当指定的对象的属性被修改后,该对象就会接收到通知,简单的说就是每次指定的对象的属性被修改后 KVO就会自动的通知响应的观察者\n\n如何理解MVC 模式\nMVC是一种设计模式  Mmodel表示数据模型  View 表示视图 Controller 表示控制器\n数据模型: 负责存储 定义 操作数据\n视图: 用来展示数据给用户 和用户进行操作交互\n控制器: 是M和V 协调者 控制器获取数据  将数据交给视图区展示\n\nIphone 和IPAD 有什么区别  有哪些组件不一样?\nIPAD里面多了两个空间  弹出控制器(UIPopoverController) 分割试图控制器 (UISplitViewController)\n\nreadwrite   readonly assign retain copy monatomic  的作用\n\nreadwrite  是可读写特性 需要生成getter方法 和setter方法时调用\nreadonly   是只读特性 只会生成getter方法 不会生成setter方法 不希望属性在类外改变\nassign 是赋值特性  setter 将传入的参数赋给实例变量 进设置变量时候用\nretain 表示持有型 setter 将传入的参数先保留在赋值,传入参数的retainconut 会+1\ncopy 表示拷贝特性 setter 方法将传入的对象复制一份 需要完全一份新的变量时调用\nnonotmic  非原子性操作 决定编译器生成生成setter getter 是否原子操作\n\n堆和栈的区别:\n堆 :  是低地址向高地址增长的    为指针或者对象申请内存 (alloc  手动申请)    大部分野指针和内存泄露&内存碎片都是出在这里问题上  成员来管理\n栈 :  高地址向低地址增长   系统管理 系统自动分配   执行效率比堆高效  方法都是在栈上面执行\n\n HTTP 和socket\nHTTP: 单向的(只能客户端向服务器发送   服务器不能主动向客户端发消息)\n  一次连接(一次请求完成 连接就关闭)\n数据量大(请求时发送的数据包括有请求行 请求头 请求数据 比较多)\n频繁请求的时候  使用轮询资源消耗太大\n这时候就需要套接字来实现了\n\n套接字 socket :双向的 长连接 数据量自己任意组织  所以数据量较小\n不是一套网络协议  是给程序员提供的一共网络接口\n\nOOD:面向对象设计\nOOP:面向对象编程\n\nC++/C 与OC 怎么混编\n1）obj-c的编译器处理后缀为m的文件时，可以识别obj-c和c的代码，处理mm文件可以识别obj-c,c,c++代码，\n但cpp文件必须只能用c/c++代码，而且cpp文件include的头文件中，也不能出现obj- c的代码，因为cpp只是cpp。\n2) 在mm文件中混用cpp直接使用即可，所以obj-c混cpp不是问题\n3）在cpp中混用obj- c其实就是使用obj-c编写的模块是我们想要的。\n如果模块以类实现，那么要按照cpp class的标准写类的定义，头文件中不能出现obj-c的东西，包括#import cocoa的。\n实现文件中，即类的实现代码中可以使用obj-c的东西，可以import,只是后缀是mm。\n如果模块以函数实现，那么头文件要按 c的格式声明函数，实现文件中，c++函数内部可以用obj-c，但后缀还是mm或m。\n总结：只要cpp文件和cpp include的文件中不包含obj-c的东西就可以用了，cpp混用obj-c的关键是使用接口，\n而不能直接使用实现代码，实际上cpp混用的是 obj-c编译后的o文件，这个东西其实是无差别的，所以可以用。obj-c的编译器支持cpp.\n\nPlist 小文件写入速度快   不支持大文件    不能存对象\n指针题\n\n写一个NSSstring 类的实现\n+(id)initWithCString:(const char *)nullTerminatedCString endcoding:(NSStringEncoding)encoding{\n\n    NSString *obj;\n    obj = [self allocWithZone:NSDefaultMallocZone()];\n    obj = [obj initWithCString:nullTerminatedCString encoding:encoding];\n\n    return obj;\n}\n\n一个描述为Copy//retain的属性的被赋值的set 方法\n-(void)setObject:(MyObj*)test\n{\n\n    if (object! = test)\n    {\n        [object release];\n    }\n    object = [test copy/retain];\n\n\n}\n自动释放池是什么,如何工作\n当您向一个对象发送一个autorelease消息时，Cocoa就会将该对象的一个引用放入到最新的自动释放池。它仍然是个正当的对象，因此自动释放池定义的作用域内的其它对象可以向它发送消息。当程序执行到作用域结束的位置时，自动释放池就会被释放，池中的所有对象也就被释放。\n1. ojc-c 是通过一种”referring counting”(引用计数)的方式来管理内存的, 对象在开始分配内存(alloc)的时候引用计数为一,以后每当碰到有copy,retain的时候引用计数都会加一, 每当碰到release和autorelease的时候引用计数就会减一,如果此对象的计数变为了0, 就会被系统销毁.\n2. NSAutoreleasePool 就是用来做引用计数的管理工作的,这个东西一般不用你管的.\n3. autorelease和release没什么区别,只是引用计数减一的时机不同而已,autorelease会在对象的使用真正结束的时候才做引用计数减一.\n\nRunloop\nRunloop是线程相关的的基础框架的一部分。一个runloop就是一个事件处理的循环,用来不停的调度工作以及处理输入事件。\n使用runloop的目的是让你的线程在有工作的时候忙于工作,而没工作的时候处于休眠状态。\nRunloop还可以在loop在循环中的同时响应其他输入源，比如界面控件的按钮，手势等\n\nViewController的生命周期\n\n1.）loadView：根视图view为空时，且view被访问时调用\n2.）viewDidLoad：在controller的view为nil时调⽤。此⽅法在编程实现view时 调用,view 控制器默认会注册memory warning notification,\n3.）viewWillAppear，viewDidAppear，viewWillDisAppear，viewDidDisAppear","source":"_posts/面试题集锦.md","raw":"---\ntitle: 面试题集锦\ndate: 2016-03-24 10:45:18\ntags: [面试题, 集锦 ,OC]\n---\nOC内存管理遵循“谁创建，谁释放。谁引用，谁管理”的机制，当创建或引用一个对象的时候，需要向它发送alloc  new copy retain 消息，当释放该对象时需要发送release消息，当该对象引用计数为0时，系统将释放该对象，这是OC的手动内存管理机制；iOS5.0之后OC又提供了自动管理机制，ARC(automatic reference counting)，管理机制跟手动管理机制一样，只是不再需要调用 retain release autorelease；它是编译时特性，当你启用ARC时，在适当的位置插入release和autorelease；它引用了strong和weak 关键字，strong修饰的指针变量指向对象时，当指针指向新值,或者指针不再存在时,相关联的对象就会自动释放，而weak修饰的指针变量指向对象，当对象的拥有者指向新值或者不存在时weak修饰的指针则自动置为nil，这是ARC管理机制\n\n线程和进程都是程序运行的基本单元,系统利用这些基本单元来实现系统对应用的并发性,\n区别是他们是不同的操作系统的资源管理方式,进程有自己的地址空间,一个进程crash掉后,在保护模式下,不会对其他进程产生影响,而线程只是进程的不同的执行路径,它没有单独的地址空间,当一个线程Crash掉,整个进程就会crash掉,所以多进程的程序要比多线程的程序更健壮,但是进程之间的切换,耗资源比较大,所以执行效率要低一些,而当一些要求同时进行并且需要共享某些变量的并发操作时,只能使用多线程,不能使用多进程\n\nblock是一个块语句，是一种回调机制，能完成对象与对象之间的通信，基于c语言实现，因为block是在栈上执行的，所以我们需要copy一份到堆上进行手动管理，局部使用时，在MRC机制下，要使用__block修饰，（全局变量等同于局部变量+__block）,在ARC机制下，要使用__weak进行修饰。\n\nstatic  有以下几条  修饰局部变量  只初始化一次  这个局部变量的作用域 只在这个方法哩  修饰全局变量  只在这个文件中使用    修饰方法  只能在这个文件内使用\n\n#import   #include  @class\n#import是oc导入头文件的关键字,#include是c/c++导入头文件的关键字,使用#import会自动导入一次,不会重复导入,相当于#include和#pragma once.@class是告诉编译器某个类的声明,当执行时才会去查看类的实现文件,使用@class可以解决头文件相互包含的问题\n\nid 类型 是OC中得任意类型  因为OC的动态特性  只有在运行的时候才知道对象时是什么类型的\nid 声明的对象有什么特性？\nid类型是通用指针类型：因为通过指针，也就是内存地址来引用对象，所以可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。然后可以将该值赋给任何对象变量。因为无论在哪里，对象总是携带它的isa成员，所以即使将它存储在id类型的通用对象变量中，也总是可以确定它的类。\n\n什么是TCP连接的三次握手\n第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。\n\n视频播放:  最简单的是系统自带的MPMoviePlayerViewController\n\n对象间是怎么通信的  :打点  代理delegate   block  KVO/KVC\n\nOC优缺点:\n优点:OC的动态特性 (动态类型   动态加载   动态绑定 )   支持OC和C/C++  混编\n缺点:OC 不支持命名空间(加前缀来区别)  不支持多继承  可以通过类别来实现\n\n类别的作用:\n类的扩充  类的私有化  类的实现\n\nget post 区别\n\n1. get是从服务器上获取数据，post是向服务器传送数据。\n2. get是把参数数据队列加到URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。\n3. 对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form表单获取提交的数据。\n4. get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。\n5. get安全性非常低，post安全性较高\n\nUDP/TCP的区别\n\nTCP—传输控制协议 ,提供的是面向连接可靠的字节流服务. 当客户端和服务器彼此交换数据前,必须在双方建立一个TCP连接 之后才能传输数据,TCP提供超时重发 丢弃重复数据 检验数据  流量控制等 保证数据从一端到另一端\n\nUDP- 用户数据包协议 是一个简单的面向数据报的传输层协议 UDP不提供可靠连接 它仅仅是吧应用程序传给IP层的数据报发送出去 但是并不能保证他们能到达目的地,由于UDP 在传输数据前不再客户端和服务端建立一个可靠的连接  且没有超时重发机制 所以传输速度很快.\n\nKVC/KVO\nKVC  Key-values-coding  他是一种可以直接通过字符串的名字 即Key 来访问 属性的方式 而不是通过调用setter   getter 方法来访问支持类对象和内建基本数据类型 简化代码\n\nKVO  它是一种观察者模式 Key-valus-observing  当指定的对象的属性被修改后,该对象就会接收到通知,简单的说就是每次指定的对象的属性被修改后 KVO就会自动的通知响应的观察者\n\n如何理解MVC 模式\nMVC是一种设计模式  Mmodel表示数据模型  View 表示视图 Controller 表示控制器\n数据模型: 负责存储 定义 操作数据\n视图: 用来展示数据给用户 和用户进行操作交互\n控制器: 是M和V 协调者 控制器获取数据  将数据交给视图区展示\n\nIphone 和IPAD 有什么区别  有哪些组件不一样?\nIPAD里面多了两个空间  弹出控制器(UIPopoverController) 分割试图控制器 (UISplitViewController)\n\nreadwrite   readonly assign retain copy monatomic  的作用\n\nreadwrite  是可读写特性 需要生成getter方法 和setter方法时调用\nreadonly   是只读特性 只会生成getter方法 不会生成setter方法 不希望属性在类外改变\nassign 是赋值特性  setter 将传入的参数赋给实例变量 进设置变量时候用\nretain 表示持有型 setter 将传入的参数先保留在赋值,传入参数的retainconut 会+1\ncopy 表示拷贝特性 setter 方法将传入的对象复制一份 需要完全一份新的变量时调用\nnonotmic  非原子性操作 决定编译器生成生成setter getter 是否原子操作\n\n堆和栈的区别:\n堆 :  是低地址向高地址增长的    为指针或者对象申请内存 (alloc  手动申请)    大部分野指针和内存泄露&内存碎片都是出在这里问题上  成员来管理\n栈 :  高地址向低地址增长   系统管理 系统自动分配   执行效率比堆高效  方法都是在栈上面执行\n\n HTTP 和socket\nHTTP: 单向的(只能客户端向服务器发送   服务器不能主动向客户端发消息)\n  一次连接(一次请求完成 连接就关闭)\n数据量大(请求时发送的数据包括有请求行 请求头 请求数据 比较多)\n频繁请求的时候  使用轮询资源消耗太大\n这时候就需要套接字来实现了\n\n套接字 socket :双向的 长连接 数据量自己任意组织  所以数据量较小\n不是一套网络协议  是给程序员提供的一共网络接口\n\nOOD:面向对象设计\nOOP:面向对象编程\n\nC++/C 与OC 怎么混编\n1）obj-c的编译器处理后缀为m的文件时，可以识别obj-c和c的代码，处理mm文件可以识别obj-c,c,c++代码，\n但cpp文件必须只能用c/c++代码，而且cpp文件include的头文件中，也不能出现obj- c的代码，因为cpp只是cpp。\n2) 在mm文件中混用cpp直接使用即可，所以obj-c混cpp不是问题\n3）在cpp中混用obj- c其实就是使用obj-c编写的模块是我们想要的。\n如果模块以类实现，那么要按照cpp class的标准写类的定义，头文件中不能出现obj-c的东西，包括#import cocoa的。\n实现文件中，即类的实现代码中可以使用obj-c的东西，可以import,只是后缀是mm。\n如果模块以函数实现，那么头文件要按 c的格式声明函数，实现文件中，c++函数内部可以用obj-c，但后缀还是mm或m。\n总结：只要cpp文件和cpp include的文件中不包含obj-c的东西就可以用了，cpp混用obj-c的关键是使用接口，\n而不能直接使用实现代码，实际上cpp混用的是 obj-c编译后的o文件，这个东西其实是无差别的，所以可以用。obj-c的编译器支持cpp.\n\nPlist 小文件写入速度快   不支持大文件    不能存对象\n指针题\n\n写一个NSSstring 类的实现\n+(id)initWithCString:(const char *)nullTerminatedCString endcoding:(NSStringEncoding)encoding{\n\n    NSString *obj;\n    obj = [self allocWithZone:NSDefaultMallocZone()];\n    obj = [obj initWithCString:nullTerminatedCString encoding:encoding];\n\n    return obj;\n}\n\n一个描述为Copy//retain的属性的被赋值的set 方法\n-(void)setObject:(MyObj*)test\n{\n\n    if (object! = test)\n    {\n        [object release];\n    }\n    object = [test copy/retain];\n\n\n}\n自动释放池是什么,如何工作\n当您向一个对象发送一个autorelease消息时，Cocoa就会将该对象的一个引用放入到最新的自动释放池。它仍然是个正当的对象，因此自动释放池定义的作用域内的其它对象可以向它发送消息。当程序执行到作用域结束的位置时，自动释放池就会被释放，池中的所有对象也就被释放。\n1. ojc-c 是通过一种”referring counting”(引用计数)的方式来管理内存的, 对象在开始分配内存(alloc)的时候引用计数为一,以后每当碰到有copy,retain的时候引用计数都会加一, 每当碰到release和autorelease的时候引用计数就会减一,如果此对象的计数变为了0, 就会被系统销毁.\n2. NSAutoreleasePool 就是用来做引用计数的管理工作的,这个东西一般不用你管的.\n3. autorelease和release没什么区别,只是引用计数减一的时机不同而已,autorelease会在对象的使用真正结束的时候才做引用计数减一.\n\nRunloop\nRunloop是线程相关的的基础框架的一部分。一个runloop就是一个事件处理的循环,用来不停的调度工作以及处理输入事件。\n使用runloop的目的是让你的线程在有工作的时候忙于工作,而没工作的时候处于休眠状态。\nRunloop还可以在loop在循环中的同时响应其他输入源，比如界面控件的按钮，手势等\n\nViewController的生命周期\n\n1.）loadView：根视图view为空时，且view被访问时调用\n2.）viewDidLoad：在controller的view为nil时调⽤。此⽅法在编程实现view时 调用,view 控制器默认会注册memory warning notification,\n3.）viewWillAppear，viewDidAppear，viewWillDisAppear，viewDidDisAppear","slug":"面试题集锦","published":1,"updated":"2018-12-27T08:05:50.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq6cdaqq000oc2fyp980mlrg","content":"<p>OC内存管理遵循“谁创建，谁释放。谁引用，谁管理”的机制，当创建或引用一个对象的时候，需要向它发送alloc  new copy retain 消息，当释放该对象时需要发送release消息，当该对象引用计数为0时，系统将释放该对象，这是OC的手动内存管理机制；iOS5.0之后OC又提供了自动管理机制，ARC(automatic reference counting)，管理机制跟手动管理机制一样，只是不再需要调用 retain release autorelease；它是编译时特性，当你启用ARC时，在适当的位置插入release和autorelease；它引用了strong和weak 关键字，strong修饰的指针变量指向对象时，当指针指向新值,或者指针不再存在时,相关联的对象就会自动释放，而weak修饰的指针变量指向对象，当对象的拥有者指向新值或者不存在时weak修饰的指针则自动置为nil，这是ARC管理机制</p>\n<p>线程和进程都是程序运行的基本单元,系统利用这些基本单元来实现系统对应用的并发性,<br>区别是他们是不同的操作系统的资源管理方式,进程有自己的地址空间,一个进程crash掉后,在保护模式下,不会对其他进程产生影响,而线程只是进程的不同的执行路径,它没有单独的地址空间,当一个线程Crash掉,整个进程就会crash掉,所以多进程的程序要比多线程的程序更健壮,但是进程之间的切换,耗资源比较大,所以执行效率要低一些,而当一些要求同时进行并且需要共享某些变量的并发操作时,只能使用多线程,不能使用多进程</p>\n<p>block是一个块语句，是一种回调机制，能完成对象与对象之间的通信，基于c语言实现，因为block是在栈上执行的，所以我们需要copy一份到堆上进行手动管理，局部使用时，在MRC机制下，要使用<strong>block修饰，（全局变量等同于局部变量+</strong>block）,在ARC机制下，要使用__weak进行修饰。</p>\n<p>static  有以下几条  修饰局部变量  只初始化一次  这个局部变量的作用域 只在这个方法哩  修饰全局变量  只在这个文件中使用    修饰方法  只能在这个文件内使用</p>\n<p>#import   #include  @class</p>\n<p>#import是oc导入头文件的关键字,#include是c/c++导入头文件的关键字,使用#import会自动导入一次,不会重复导入,相当于#include和#pragma once.@class是告诉编译器某个类的声明,当执行时才会去查看类的实现文件,使用@class可以解决头文件相互包含的问题</p>\n<p>id 类型 是OC中得任意类型  因为OC的动态特性  只有在运行的时候才知道对象时是什么类型的<br>id 声明的对象有什么特性？<br>id类型是通用指针类型：因为通过指针，也就是内存地址来引用对象，所以可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。然后可以将该值赋给任何对象变量。因为无论在哪里，对象总是携带它的isa成员，所以即使将它存储在id类型的通用对象变量中，也总是可以确定它的类。</p>\n<p>什么是TCP连接的三次握手<br>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p>\n<p>视频播放:  最简单的是系统自带的MPMoviePlayerViewController</p>\n<p>对象间是怎么通信的  :打点  代理delegate   block  KVO/KVC</p>\n<p>OC优缺点:<br>优点:OC的动态特性 (动态类型   动态加载   动态绑定 )   支持OC和C/C++  混编<br>缺点:OC 不支持命名空间(加前缀来区别)  不支持多继承  可以通过类别来实现</p>\n<p>类别的作用:<br>类的扩充  类的私有化  类的实现</p>\n<p>get post 区别</p>\n<ol>\n<li>get是从服务器上获取数据，post是向服务器传送数据。</li>\n<li>get是把参数数据队列加到URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。</li>\n<li>对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form表单获取提交的数据。</li>\n<li>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。</li>\n<li>get安全性非常低，post安全性较高</li>\n</ol>\n<p>UDP/TCP的区别</p>\n<p>TCP—传输控制协议 ,提供的是面向连接可靠的字节流服务. 当客户端和服务器彼此交换数据前,必须在双方建立一个TCP连接 之后才能传输数据,TCP提供超时重发 丢弃重复数据 检验数据  流量控制等 保证数据从一端到另一端</p>\n<p>UDP- 用户数据包协议 是一个简单的面向数据报的传输层协议 UDP不提供可靠连接 它仅仅是吧应用程序传给IP层的数据报发送出去 但是并不能保证他们能到达目的地,由于UDP 在传输数据前不再客户端和服务端建立一个可靠的连接  且没有超时重发机制 所以传输速度很快.</p>\n<p>KVC/KVO<br>KVC  Key-values-coding  他是一种可以直接通过字符串的名字 即Key 来访问 属性的方式 而不是通过调用setter   getter 方法来访问支持类对象和内建基本数据类型 简化代码</p>\n<p>KVO  它是一种观察者模式 Key-valus-observing  当指定的对象的属性被修改后,该对象就会接收到通知,简单的说就是每次指定的对象的属性被修改后 KVO就会自动的通知响应的观察者</p>\n<p>如何理解MVC 模式<br>MVC是一种设计模式  Mmodel表示数据模型  View 表示视图 Controller 表示控制器<br>数据模型: 负责存储 定义 操作数据<br>视图: 用来展示数据给用户 和用户进行操作交互<br>控制器: 是M和V 协调者 控制器获取数据  将数据交给视图区展示</p>\n<p>Iphone 和IPAD 有什么区别  有哪些组件不一样?<br>IPAD里面多了两个空间  弹出控制器(UIPopoverController) 分割试图控制器 (UISplitViewController)</p>\n<p>readwrite   readonly assign retain copy monatomic  的作用</p>\n<p>readwrite  是可读写特性 需要生成getter方法 和setter方法时调用<br>readonly   是只读特性 只会生成getter方法 不会生成setter方法 不希望属性在类外改变<br>assign 是赋值特性  setter 将传入的参数赋给实例变量 进设置变量时候用<br>retain 表示持有型 setter 将传入的参数先保留在赋值,传入参数的retainconut 会+1<br>copy 表示拷贝特性 setter 方法将传入的对象复制一份 需要完全一份新的变量时调用<br>nonotmic  非原子性操作 决定编译器生成生成setter getter 是否原子操作</p>\n<p>堆和栈的区别:<br>堆 :  是低地址向高地址增长的    为指针或者对象申请内存 (alloc  手动申请)    大部分野指针和内存泄露&amp;内存碎片都是出在这里问题上  成员来管理<br>栈 :  高地址向低地址增长   系统管理 系统自动分配   执行效率比堆高效  方法都是在栈上面执行</p>\n<p> HTTP 和socket<br>HTTP: 单向的(只能客户端向服务器发送   服务器不能主动向客户端发消息)<br>  一次连接(一次请求完成 连接就关闭)<br>数据量大(请求时发送的数据包括有请求行 请求头 请求数据 比较多)<br>频繁请求的时候  使用轮询资源消耗太大<br>这时候就需要套接字来实现了</p>\n<p>套接字 socket :双向的 长连接 数据量自己任意组织  所以数据量较小<br>不是一套网络协议  是给程序员提供的一共网络接口</p>\n<p>OOD:面向对象设计<br>OOP:面向对象编程</p>\n<p>C++/C 与OC 怎么混编<br>1）obj-c的编译器处理后缀为m的文件时，可以识别obj-c和c的代码，处理mm文件可以识别obj-c,c,c++代码，<br>但cpp文件必须只能用c/c++代码，而且cpp文件include的头文件中，也不能出现obj- c的代码，因为cpp只是cpp。<br>2) 在mm文件中混用cpp直接使用即可，所以obj-c混cpp不是问题<br>3）在cpp中混用obj- c其实就是使用obj-c编写的模块是我们想要的。<br>如果模块以类实现，那么要按照cpp class的标准写类的定义，头文件中不能出现obj-c的东西，包括#import cocoa的。<br>实现文件中，即类的实现代码中可以使用obj-c的东西，可以import,只是后缀是mm。<br>如果模块以函数实现，那么头文件要按 c的格式声明函数，实现文件中，c++函数内部可以用obj-c，但后缀还是mm或m。<br>总结：只要cpp文件和cpp include的文件中不包含obj-c的东西就可以用了，cpp混用obj-c的关键是使用接口，<br>而不能直接使用实现代码，实际上cpp混用的是 obj-c编译后的o文件，这个东西其实是无差别的，所以可以用。obj-c的编译器支持cpp.</p>\n<p>Plist 小文件写入速度快   不支持大文件    不能存对象<br>指针题</p>\n<p>写一个NSSstring 类的实现<br>+(id)initWithCString:(const char *)nullTerminatedCString endcoding:(NSStringEncoding)encoding{</p>\n<pre><code>NSString *obj;\nobj = [self allocWithZone:NSDefaultMallocZone()];\nobj = [obj initWithCString:nullTerminatedCString encoding:encoding];\n\nreturn obj;\n</code></pre><p>}</p>\n<p>一个描述为Copy//retain的属性的被赋值的set 方法<br>-(void)setObject:(MyObj*)test<br>{</p>\n<pre><code>if (object! = test)\n{\n    [object release];\n}\nobject = [test copy/retain];\n</code></pre><p>}<br>自动释放池是什么,如何工作<br>当您向一个对象发送一个autorelease消息时，Cocoa就会将该对象的一个引用放入到最新的自动释放池。它仍然是个正当的对象，因此自动释放池定义的作用域内的其它对象可以向它发送消息。当程序执行到作用域结束的位置时，自动释放池就会被释放，池中的所有对象也就被释放。</p>\n<ol>\n<li>ojc-c 是通过一种”referring counting”(引用计数)的方式来管理内存的, 对象在开始分配内存(alloc)的时候引用计数为一,以后每当碰到有copy,retain的时候引用计数都会加一, 每当碰到release和autorelease的时候引用计数就会减一,如果此对象的计数变为了0, 就会被系统销毁.</li>\n<li>NSAutoreleasePool 就是用来做引用计数的管理工作的,这个东西一般不用你管的.</li>\n<li>autorelease和release没什么区别,只是引用计数减一的时机不同而已,autorelease会在对象的使用真正结束的时候才做引用计数减一.</li>\n</ol>\n<p>Runloop<br>Runloop是线程相关的的基础框架的一部分。一个runloop就是一个事件处理的循环,用来不停的调度工作以及处理输入事件。<br>使用runloop的目的是让你的线程在有工作的时候忙于工作,而没工作的时候处于休眠状态。<br>Runloop还可以在loop在循环中的同时响应其他输入源，比如界面控件的按钮，手势等</p>\n<p>ViewController的生命周期</p>\n<p>1.）loadView：根视图view为空时，且view被访问时调用<br>2.）viewDidLoad：在controller的view为nil时调⽤。此⽅法在编程实现view时 调用,view 控制器默认会注册memory warning notification,<br>3.）viewWillAppear，viewDidAppear，viewWillDisAppear，viewDidDisAppear</p>\n","site":{"data":{}},"excerpt":"","more":"<p>OC内存管理遵循“谁创建，谁释放。谁引用，谁管理”的机制，当创建或引用一个对象的时候，需要向它发送alloc  new copy retain 消息，当释放该对象时需要发送release消息，当该对象引用计数为0时，系统将释放该对象，这是OC的手动内存管理机制；iOS5.0之后OC又提供了自动管理机制，ARC(automatic reference counting)，管理机制跟手动管理机制一样，只是不再需要调用 retain release autorelease；它是编译时特性，当你启用ARC时，在适当的位置插入release和autorelease；它引用了strong和weak 关键字，strong修饰的指针变量指向对象时，当指针指向新值,或者指针不再存在时,相关联的对象就会自动释放，而weak修饰的指针变量指向对象，当对象的拥有者指向新值或者不存在时weak修饰的指针则自动置为nil，这是ARC管理机制</p>\n<p>线程和进程都是程序运行的基本单元,系统利用这些基本单元来实现系统对应用的并发性,<br>区别是他们是不同的操作系统的资源管理方式,进程有自己的地址空间,一个进程crash掉后,在保护模式下,不会对其他进程产生影响,而线程只是进程的不同的执行路径,它没有单独的地址空间,当一个线程Crash掉,整个进程就会crash掉,所以多进程的程序要比多线程的程序更健壮,但是进程之间的切换,耗资源比较大,所以执行效率要低一些,而当一些要求同时进行并且需要共享某些变量的并发操作时,只能使用多线程,不能使用多进程</p>\n<p>block是一个块语句，是一种回调机制，能完成对象与对象之间的通信，基于c语言实现，因为block是在栈上执行的，所以我们需要copy一份到堆上进行手动管理，局部使用时，在MRC机制下，要使用<strong>block修饰，（全局变量等同于局部变量+</strong>block）,在ARC机制下，要使用__weak进行修饰。</p>\n<p>static  有以下几条  修饰局部变量  只初始化一次  这个局部变量的作用域 只在这个方法哩  修饰全局变量  只在这个文件中使用    修饰方法  只能在这个文件内使用</p>\n<p>#import   #include  @class</p>\n<p>#import是oc导入头文件的关键字,#include是c/c++导入头文件的关键字,使用#import会自动导入一次,不会重复导入,相当于#include和#pragma once.@class是告诉编译器某个类的声明,当执行时才会去查看类的实现文件,使用@class可以解决头文件相互包含的问题</p>\n<p>id 类型 是OC中得任意类型  因为OC的动态特性  只有在运行的时候才知道对象时是什么类型的<br>id 声明的对象有什么特性？<br>id类型是通用指针类型：因为通过指针，也就是内存地址来引用对象，所以可以自由地将它们在id变量之间来回赋值。因此返回id类型值的方法只是返回指向内存中某对象的指针。然后可以将该值赋给任何对象变量。因为无论在哪里，对象总是携带它的isa成员，所以即使将它存储在id类型的通用对象变量中，也总是可以确定它的类。</p>\n<p>什么是TCP连接的三次握手<br>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p>\n<p>视频播放:  最简单的是系统自带的MPMoviePlayerViewController</p>\n<p>对象间是怎么通信的  :打点  代理delegate   block  KVO/KVC</p>\n<p>OC优缺点:<br>优点:OC的动态特性 (动态类型   动态加载   动态绑定 )   支持OC和C/C++  混编<br>缺点:OC 不支持命名空间(加前缀来区别)  不支持多继承  可以通过类别来实现</p>\n<p>类别的作用:<br>类的扩充  类的私有化  类的实现</p>\n<p>get post 区别</p>\n<ol>\n<li>get是从服务器上获取数据，post是向服务器传送数据。</li>\n<li>get是把参数数据队列加到URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。</li>\n<li>对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form表单获取提交的数据。</li>\n<li>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。</li>\n<li>get安全性非常低，post安全性较高</li>\n</ol>\n<p>UDP/TCP的区别</p>\n<p>TCP—传输控制协议 ,提供的是面向连接可靠的字节流服务. 当客户端和服务器彼此交换数据前,必须在双方建立一个TCP连接 之后才能传输数据,TCP提供超时重发 丢弃重复数据 检验数据  流量控制等 保证数据从一端到另一端</p>\n<p>UDP- 用户数据包协议 是一个简单的面向数据报的传输层协议 UDP不提供可靠连接 它仅仅是吧应用程序传给IP层的数据报发送出去 但是并不能保证他们能到达目的地,由于UDP 在传输数据前不再客户端和服务端建立一个可靠的连接  且没有超时重发机制 所以传输速度很快.</p>\n<p>KVC/KVO<br>KVC  Key-values-coding  他是一种可以直接通过字符串的名字 即Key 来访问 属性的方式 而不是通过调用setter   getter 方法来访问支持类对象和内建基本数据类型 简化代码</p>\n<p>KVO  它是一种观察者模式 Key-valus-observing  当指定的对象的属性被修改后,该对象就会接收到通知,简单的说就是每次指定的对象的属性被修改后 KVO就会自动的通知响应的观察者</p>\n<p>如何理解MVC 模式<br>MVC是一种设计模式  Mmodel表示数据模型  View 表示视图 Controller 表示控制器<br>数据模型: 负责存储 定义 操作数据<br>视图: 用来展示数据给用户 和用户进行操作交互<br>控制器: 是M和V 协调者 控制器获取数据  将数据交给视图区展示</p>\n<p>Iphone 和IPAD 有什么区别  有哪些组件不一样?<br>IPAD里面多了两个空间  弹出控制器(UIPopoverController) 分割试图控制器 (UISplitViewController)</p>\n<p>readwrite   readonly assign retain copy monatomic  的作用</p>\n<p>readwrite  是可读写特性 需要生成getter方法 和setter方法时调用<br>readonly   是只读特性 只会生成getter方法 不会生成setter方法 不希望属性在类外改变<br>assign 是赋值特性  setter 将传入的参数赋给实例变量 进设置变量时候用<br>retain 表示持有型 setter 将传入的参数先保留在赋值,传入参数的retainconut 会+1<br>copy 表示拷贝特性 setter 方法将传入的对象复制一份 需要完全一份新的变量时调用<br>nonotmic  非原子性操作 决定编译器生成生成setter getter 是否原子操作</p>\n<p>堆和栈的区别:<br>堆 :  是低地址向高地址增长的    为指针或者对象申请内存 (alloc  手动申请)    大部分野指针和内存泄露&amp;内存碎片都是出在这里问题上  成员来管理<br>栈 :  高地址向低地址增长   系统管理 系统自动分配   执行效率比堆高效  方法都是在栈上面执行</p>\n<p> HTTP 和socket<br>HTTP: 单向的(只能客户端向服务器发送   服务器不能主动向客户端发消息)<br>  一次连接(一次请求完成 连接就关闭)<br>数据量大(请求时发送的数据包括有请求行 请求头 请求数据 比较多)<br>频繁请求的时候  使用轮询资源消耗太大<br>这时候就需要套接字来实现了</p>\n<p>套接字 socket :双向的 长连接 数据量自己任意组织  所以数据量较小<br>不是一套网络协议  是给程序员提供的一共网络接口</p>\n<p>OOD:面向对象设计<br>OOP:面向对象编程</p>\n<p>C++/C 与OC 怎么混编<br>1）obj-c的编译器处理后缀为m的文件时，可以识别obj-c和c的代码，处理mm文件可以识别obj-c,c,c++代码，<br>但cpp文件必须只能用c/c++代码，而且cpp文件include的头文件中，也不能出现obj- c的代码，因为cpp只是cpp。<br>2) 在mm文件中混用cpp直接使用即可，所以obj-c混cpp不是问题<br>3）在cpp中混用obj- c其实就是使用obj-c编写的模块是我们想要的。<br>如果模块以类实现，那么要按照cpp class的标准写类的定义，头文件中不能出现obj-c的东西，包括#import cocoa的。<br>实现文件中，即类的实现代码中可以使用obj-c的东西，可以import,只是后缀是mm。<br>如果模块以函数实现，那么头文件要按 c的格式声明函数，实现文件中，c++函数内部可以用obj-c，但后缀还是mm或m。<br>总结：只要cpp文件和cpp include的文件中不包含obj-c的东西就可以用了，cpp混用obj-c的关键是使用接口，<br>而不能直接使用实现代码，实际上cpp混用的是 obj-c编译后的o文件，这个东西其实是无差别的，所以可以用。obj-c的编译器支持cpp.</p>\n<p>Plist 小文件写入速度快   不支持大文件    不能存对象<br>指针题</p>\n<p>写一个NSSstring 类的实现<br>+(id)initWithCString:(const char *)nullTerminatedCString endcoding:(NSStringEncoding)encoding{</p>\n<pre><code>NSString *obj;\nobj = [self allocWithZone:NSDefaultMallocZone()];\nobj = [obj initWithCString:nullTerminatedCString encoding:encoding];\n\nreturn obj;\n</code></pre><p>}</p>\n<p>一个描述为Copy//retain的属性的被赋值的set 方法<br>-(void)setObject:(MyObj*)test<br>{</p>\n<pre><code>if (object! = test)\n{\n    [object release];\n}\nobject = [test copy/retain];\n</code></pre><p>}<br>自动释放池是什么,如何工作<br>当您向一个对象发送一个autorelease消息时，Cocoa就会将该对象的一个引用放入到最新的自动释放池。它仍然是个正当的对象，因此自动释放池定义的作用域内的其它对象可以向它发送消息。当程序执行到作用域结束的位置时，自动释放池就会被释放，池中的所有对象也就被释放。</p>\n<ol>\n<li>ojc-c 是通过一种”referring counting”(引用计数)的方式来管理内存的, 对象在开始分配内存(alloc)的时候引用计数为一,以后每当碰到有copy,retain的时候引用计数都会加一, 每当碰到release和autorelease的时候引用计数就会减一,如果此对象的计数变为了0, 就会被系统销毁.</li>\n<li>NSAutoreleasePool 就是用来做引用计数的管理工作的,这个东西一般不用你管的.</li>\n<li>autorelease和release没什么区别,只是引用计数减一的时机不同而已,autorelease会在对象的使用真正结束的时候才做引用计数减一.</li>\n</ol>\n<p>Runloop<br>Runloop是线程相关的的基础框架的一部分。一个runloop就是一个事件处理的循环,用来不停的调度工作以及处理输入事件。<br>使用runloop的目的是让你的线程在有工作的时候忙于工作,而没工作的时候处于休眠状态。<br>Runloop还可以在loop在循环中的同时响应其他输入源，比如界面控件的按钮，手势等</p>\n<p>ViewController的生命周期</p>\n<p>1.）loadView：根视图view为空时，且view被访问时调用<br>2.）viewDidLoad：在controller的view为nil时调⽤。此⽅法在编程实现view时 调用,view 控制器默认会注册memory warning notification,<br>3.）viewWillAppear，viewDidAppear，viewWillDisAppear，viewDidDisAppear</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjq6cdakz0000c2fy06qqljgj","tag_id":"cjq6cdal90003c2fyg3lp2ip5","_id":"cjq6cdalf0009c2fy6q7ku0wx"},{"post_id":"cjq6cdakz0000c2fy06qqljgj","tag_id":"cjq6cdald0006c2fyh1gcqvq5","_id":"cjq6cdalf000ac2fygn5wupvo"},{"post_id":"cjq6cdakz0000c2fy06qqljgj","tag_id":"cjq6cdale0007c2fylwn24f51","_id":"cjq6cdalf000cc2fyhcafnbsa"},{"post_id":"cjq6cdal70002c2fy4395ytg7","tag_id":"cjq6cdale0008c2fyt6rf7gg5","_id":"cjq6cdalf000dc2fymz64ih4m"},{"post_id":"cjq6cdalb0004c2fykv2o0wbt","tag_id":"cjq6cdalf000bc2fyh9a489f4","_id":"cjq6cdalg000fc2fyftkkf48i"},{"post_id":"cjq6cdalc0005c2fylma5v90f","tag_id":"cjq6cdalf000ec2fy6yode1ka","_id":"cjq6cdali000ic2fyjioytwi1"},{"post_id":"cjq6cdalc0005c2fylma5v90f","tag_id":"cjq6cdalh000gc2fyh1d6xvu4","_id":"cjq6cdali000jc2fykd7k6t3t"},{"post_id":"cjq6cdalc0005c2fylma5v90f","tag_id":"cjq6cdalh000hc2fyiakc14gf","_id":"cjq6cdali000kc2fyogstkk9v"},{"post_id":"cjq6cdaqj000lc2fypuxiato4","tag_id":"cjq6cdaqq000nc2fyvrs0a1ef","_id":"cjq6cdaqu000rc2fy5t8ol74h"},{"post_id":"cjq6cdaqj000lc2fypuxiato4","tag_id":"cjq6cdaqt000pc2fypogctkev","_id":"cjq6cdaqv000sc2fyjav9hl4c"},{"post_id":"cjq6cdaqo000mc2fy1u5kb1om","tag_id":"cjq6cdaqu000qc2fyv9ftazvz","_id":"cjq6cdaqv000uc2fyjoqcuuyz"},{"post_id":"cjq6cdaqq000oc2fyp980mlrg","tag_id":"cjq6cdaqv000tc2fyfwlf1rj2","_id":"cjq6cdaqx000xc2fy9mkhvh7j"},{"post_id":"cjq6cdaqq000oc2fyp980mlrg","tag_id":"cjq6cdaqw000vc2fyoxoxtotc","_id":"cjq6cdaqy000yc2fydwduy68y"},{"post_id":"cjq6cdaqq000oc2fyp980mlrg","tag_id":"cjq6cdaqx000wc2fyimdw4a77","_id":"cjq6cdaqy000zc2fytbzcluki"}],"Tag":[{"name":"KVO","_id":"cjq6cdal90003c2fyg3lp2ip5"},{"name":"KVC","_id":"cjq6cdald0006c2fyh1gcqvq5"},{"name":"监听","_id":"cjq6cdale0007c2fylwn24f51"},{"name":"文件夹权限","_id":"cjq6cdale0008c2fyt6rf7gg5"},{"name":"iOS测试包","_id":"cjq6cdalf000bc2fyh9a489f4"},{"name":"hexo","_id":"cjq6cdalf000ec2fy6yode1ka"},{"name":"Mac","_id":"cjq6cdalh000gc2fyh1d6xvu4"},{"name":"GitHub","_id":"cjq6cdalh000hc2fyiakc14gf"},{"name":"BAT","_id":"cjq6cdaqq000nc2fyvrs0a1ef"},{"name":"面试","_id":"cjq6cdaqt000pc2fypogctkev"},{"name":"iOS","_id":"cjq6cdaqu000qc2fyv9ftazvz"},{"name":"面试题","_id":"cjq6cdaqv000tc2fyfwlf1rj2"},{"name":"集锦","_id":"cjq6cdaqw000vc2fyoxoxtotc"},{"name":"OC","_id":"cjq6cdaqx000wc2fyimdw4a77"}]}}